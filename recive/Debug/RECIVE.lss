
RECIVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800060  00800060  0000143e  2**0
                  ALLOC
  2 .stab         0000189c  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b4d  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_4>
      14:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_5>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_10>
      2c:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_13>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_14>
      3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_15>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <main>
      74:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_13>:
void __vector_13(void) __attribute__((signal,used));
void __vector_14(void) __attribute__((signal,used));
void __vector_15(void) __attribute__((signal,used));

void __vector_13(void)
{
      7c:	1f 92       	push	r1
      7e:	0f 92       	push	r0
      80:	0f b6       	in	r0, 0x3f	; 63
      82:	0f 92       	push	r0
      84:	11 24       	eor	r1, r1
      86:	2f 93       	push	r18
      88:	3f 93       	push	r19
      8a:	4f 93       	push	r20
      8c:	5f 93       	push	r21
      8e:	6f 93       	push	r22
      90:	7f 93       	push	r23
      92:	8f 93       	push	r24
      94:	9f 93       	push	r25
      96:	af 93       	push	r26
      98:	bf 93       	push	r27
      9a:	ef 93       	push	r30
      9c:	ff 93       	push	r31
      9e:	df 93       	push	r29
      a0:	cf 93       	push	r28
      a2:	cd b7       	in	r28, 0x3d	; 61
      a4:	de b7       	in	r29, 0x3e	; 62
	USART_CallBack_ISR_COMP_RX();
      a6:	e0 91 62 00 	lds	r30, 0x0062
      aa:	f0 91 63 00 	lds	r31, 0x0063
      ae:	09 95       	icall
}
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	ff 91       	pop	r31
      b6:	ef 91       	pop	r30
      b8:	bf 91       	pop	r27
      ba:	af 91       	pop	r26
      bc:	9f 91       	pop	r25
      be:	8f 91       	pop	r24
      c0:	7f 91       	pop	r23
      c2:	6f 91       	pop	r22
      c4:	5f 91       	pop	r21
      c6:	4f 91       	pop	r20
      c8:	3f 91       	pop	r19
      ca:	2f 91       	pop	r18
      cc:	0f 90       	pop	r0
      ce:	0f be       	out	0x3f, r0	; 63
      d0:	0f 90       	pop	r0
      d2:	1f 90       	pop	r1
      d4:	18 95       	reti

000000d6 <__vector_14>:
void __vector_14(void)
{
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	11 24       	eor	r1, r1
      e0:	2f 93       	push	r18
      e2:	3f 93       	push	r19
      e4:	4f 93       	push	r20
      e6:	5f 93       	push	r21
      e8:	6f 93       	push	r22
      ea:	7f 93       	push	r23
      ec:	8f 93       	push	r24
      ee:	9f 93       	push	r25
      f0:	af 93       	push	r26
      f2:	bf 93       	push	r27
      f4:	ef 93       	push	r30
      f6:	ff 93       	push	r31
      f8:	df 93       	push	r29
      fa:	cf 93       	push	r28
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
	USART_CallBack_DATA_EMBTY();
     100:	e0 91 60 00 	lds	r30, 0x0060
     104:	f0 91 61 00 	lds	r31, 0x0061
     108:	09 95       	icall
}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	ff 91       	pop	r31
     110:	ef 91       	pop	r30
     112:	bf 91       	pop	r27
     114:	af 91       	pop	r26
     116:	9f 91       	pop	r25
     118:	8f 91       	pop	r24
     11a:	7f 91       	pop	r23
     11c:	6f 91       	pop	r22
     11e:	5f 91       	pop	r21
     120:	4f 91       	pop	r20
     122:	3f 91       	pop	r19
     124:	2f 91       	pop	r18
     126:	0f 90       	pop	r0
     128:	0f be       	out	0x3f, r0	; 63
     12a:	0f 90       	pop	r0
     12c:	1f 90       	pop	r1
     12e:	18 95       	reti

00000130 <__vector_15>:
void __vector_15(void)
{
     130:	1f 92       	push	r1
     132:	0f 92       	push	r0
     134:	0f b6       	in	r0, 0x3f	; 63
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	2f 93       	push	r18
     13c:	3f 93       	push	r19
     13e:	4f 93       	push	r20
     140:	5f 93       	push	r21
     142:	6f 93       	push	r22
     144:	7f 93       	push	r23
     146:	8f 93       	push	r24
     148:	9f 93       	push	r25
     14a:	af 93       	push	r26
     14c:	bf 93       	push	r27
     14e:	ef 93       	push	r30
     150:	ff 93       	push	r31
     152:	df 93       	push	r29
     154:	cf 93       	push	r28
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
	USART_CallBack_COMP_TX();
     15a:	e0 91 64 00 	lds	r30, 0x0064
     15e:	f0 91 65 00 	lds	r31, 0x0065
     162:	09 95       	icall
}
     164:	cf 91       	pop	r28
     166:	df 91       	pop	r29
     168:	ff 91       	pop	r31
     16a:	ef 91       	pop	r30
     16c:	bf 91       	pop	r27
     16e:	af 91       	pop	r26
     170:	9f 91       	pop	r25
     172:	8f 91       	pop	r24
     174:	7f 91       	pop	r23
     176:	6f 91       	pop	r22
     178:	5f 91       	pop	r21
     17a:	4f 91       	pop	r20
     17c:	3f 91       	pop	r19
     17e:	2f 91       	pop	r18
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <USART_vid_INTIAL>:

void USART_vid_INTIAL   (long BaudRate)
{
     18a:	df 93       	push	r29
     18c:	cf 93       	push	r28
     18e:	00 d0       	rcall	.+0      	; 0x190 <USART_vid_INTIAL+0x6>
     190:	00 d0       	rcall	.+0      	; 0x192 <USART_vid_INTIAL+0x8>
     192:	00 d0       	rcall	.+0      	; 0x194 <USART_vid_INTIAL+0xa>
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
     198:	6b 83       	std	Y+3, r22	; 0x03
     19a:	7c 83       	std	Y+4, r23	; 0x04
     19c:	8d 83       	std	Y+5, r24	; 0x05
     19e:	9e 83       	std	Y+6, r25	; 0x06

	UCSRB=0x00;
     1a0:	ea e2       	ldi	r30, 0x2A	; 42
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	10 82       	st	Z, r1
	UCSRC=0x00;
     1a6:	e0 e4       	ldi	r30, 0x40	; 64
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	10 82       	st	Z, r1
	/////////////////ENABLE RX&&TX
	SET_BIT(UCSRB,RXEN)
     1ac:	aa e2       	ldi	r26, 0x2A	; 42
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	ea e2       	ldi	r30, 0x2A	; 42
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	80 61       	ori	r24, 0x10	; 16
     1b8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN)
     1ba:	aa e2       	ldi	r26, 0x2A	; 42
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	ea e2       	ldi	r30, 0x2A	; 42
     1c0:	f0 e0       	ldi	r31, 0x00	; 0
     1c2:	80 81       	ld	r24, Z
     1c4:	88 60       	ori	r24, 0x08	; 8
     1c6:	8c 93       	st	X, r24
	SET_BIT(UCSRC,URSEL)
     1c8:	a0 e4       	ldi	r26, 0x40	; 64
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	e0 e4       	ldi	r30, 0x40	; 64
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 68       	ori	r24, 0x80	; 128
     1d4:	8c 93       	st	X, r24
	#elif USART_u8_FRAME_SIZE_SELECT==USART_u8_7_BIT
	CLEAR_BIT(UCSRC,UCSZ0)
	SET_BIT(UCSRC,UCSZ1)
	CLEAR_BIT(UCSRB,UCSZ2)
	#elif USART_u8_FRAME_SIZE_SELECT==USART_u8_8_BIT
	SET_BIT(UCSRC,UCSZ0)
     1d6:	a0 e4       	ldi	r26, 0x40	; 64
     1d8:	b0 e0       	ldi	r27, 0x00	; 0
     1da:	e0 e4       	ldi	r30, 0x40	; 64
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	82 60       	ori	r24, 0x02	; 2
     1e2:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1)
     1e4:	a0 e4       	ldi	r26, 0x40	; 64
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e0 e4       	ldi	r30, 0x40	; 64
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	84 60       	ori	r24, 0x04	; 4
     1f0:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2)
     1f2:	aa e2       	ldi	r26, 0x2A	; 42
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	ea e2       	ldi	r30, 0x2A	; 42
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	8b 7f       	andi	r24, 0xFB	; 251
     1fe:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1)
	SET_BIT(UCSRB,UCSZ2)
	#endif
	////////////////////////USART Mode Select	
	#if USART_u8_MODE_Select==USART_u8_Asyn_Oper
	CLEAR_BIT(UCSRC,UMSEL)
     200:	a0 e4       	ldi	r26, 0x40	; 64
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	e0 e4       	ldi	r30, 0x40	; 64
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	8f 7b       	andi	r24, 0xBF	; 191
     20c:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCPOL)
     20e:	a0 e4       	ldi	r26, 0x40	; 64
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e0 e4       	ldi	r30, 0x40	; 64
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8e 7f       	andi	r24, 0xFE	; 254
     21a:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCPOL)
	#endif
	#endif
	////////////////////////USART Parity Mode Select	
	#if USART_u8_Parity_MODE_Select==USART_u8_Disabled
	CLEAR_BIT(UCSRC,UPM0)
     21c:	a0 e4       	ldi	r26, 0x40	; 64
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e0 e4       	ldi	r30, 0x40	; 64
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	8f 7e       	andi	r24, 0xEF	; 239
     228:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM1)
     22a:	a0 e4       	ldi	r26, 0x40	; 64
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	e0 e4       	ldi	r30, 0x40	; 64
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	8f 7d       	andi	r24, 0xDF	; 223
     236:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UPM0)
	SET_BIT(UCSRC,UPM1)
	#endif	
	////////////////////////USART  Stop Bit Select
	#if USART_u8_Stop_Bit_Select==USART_u8_1_BIT
	CLEAR_BIT(UCSRC,USBS)
     238:	a0 e4       	ldi	r26, 0x40	; 64
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	e0 e4       	ldi	r30, 0x40	; 64
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	87 7f       	andi	r24, 0xF7	; 247
     244:	8c 93       	st	X, r24
	#elif USART_u8_Stop_Bit_Select==USART_u8_2_BIT
	SET_BIT(UCSRC,USBS)
	#endif	
	
	u16 Local_16_BaudRate = (((1000000UL)/(16*BaudRate))-1);
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9c 81       	ldd	r25, Y+4	; 0x04
     24a:	ad 81       	ldd	r26, Y+5	; 0x05
     24c:	be 81       	ldd	r27, Y+6	; 0x06
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	aa 1f       	adc	r26, r26
     254:	bb 1f       	adc	r27, r27
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	aa 1f       	adc	r26, r26
     25c:	bb 1f       	adc	r27, r27
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	aa 1f       	adc	r26, r26
     264:	bb 1f       	adc	r27, r27
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	aa 1f       	adc	r26, r26
     26c:	bb 1f       	adc	r27, r27
     26e:	9c 01       	movw	r18, r24
     270:	ad 01       	movw	r20, r26
     272:	80 e4       	ldi	r24, 0x40	; 64
     274:	92 e4       	ldi	r25, 0x42	; 66
     276:	af e0       	ldi	r26, 0x0F	; 15
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	bc 01       	movw	r22, r24
     27c:	cd 01       	movw	r24, r26
     27e:	0e 94 c1 09 	call	0x1382	; 0x1382 <__udivmodsi4>
     282:	da 01       	movw	r26, r20
     284:	c9 01       	movw	r24, r18
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	9a 83       	std	Y+2, r25	; 0x02
     28a:	89 83       	std	Y+1, r24	; 0x01
		UBRRH = (unsigned char)(Local_16_BaudRate>>8)&0x0F ;
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	9a 81       	ldd	r25, Y+2	; 0x02
     294:	89 2f       	mov	r24, r25
     296:	99 27       	eor	r25, r25
     298:	8f 70       	andi	r24, 0x0F	; 15
     29a:	80 83       	st	Z, r24
		UBRRL =(unsigned char) Local_16_BaudRate&0xFF ;
     29c:	e9 e2       	ldi	r30, 0x29	; 41
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	80 83       	st	Z, r24

}
     2a4:	26 96       	adiw	r28, 0x06	; 6
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	cf 91       	pop	r28
     2b2:	df 91       	pop	r29
     2b4:	08 95       	ret

000002b6 <USART_vid_SendChar>:




void USART_vid_SendChar(u8 Copy_u8_char)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	0f 92       	push	r0
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,UDRE))) ;
     2c2:	eb e2       	ldi	r30, 0x2B	; 43
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	88 2f       	mov	r24, r24
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	80 72       	andi	r24, 0x20	; 32
     2ce:	90 70       	andi	r25, 0x00	; 0
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	b9 f3       	breq	.-18     	; 0x2c2 <USART_vid_SendChar+0xc>

	UDR = Copy_u8_char ;
     2d4:	ec e2       	ldi	r30, 0x2C	; 44
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	80 83       	st	Z, r24

}
     2dc:	0f 90       	pop	r0
     2de:	cf 91       	pop	r28
     2e0:	df 91       	pop	r29
     2e2:	08 95       	ret

000002e4 <USART_vid_SendString>:

void USART_vid_SendString(u8* Copy_pu8_Str)
{
     2e4:	df 93       	push	r29
     2e6:	cf 93       	push	r28
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <USART_vid_SendString+0x6>
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	0a c0       	rjmp	.+20     	; 0x308 <USART_vid_SendString+0x24>
	while(*Copy_pu8_Str != '\0')
	{
		USART_vid_SendChar(*Copy_pu8_Str) ;
     2f4:	e9 81       	ldd	r30, Y+1	; 0x01
     2f6:	fa 81       	ldd	r31, Y+2	; 0x02
     2f8:	80 81       	ld	r24, Z
     2fa:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART_vid_SendChar>
		Copy_pu8_Str++ ;
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	9a 81       	ldd	r25, Y+2	; 0x02
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01

}

void USART_vid_SendString(u8* Copy_pu8_Str)
{
	while(*Copy_pu8_Str != '\0')
     308:	e9 81       	ldd	r30, Y+1	; 0x01
     30a:	fa 81       	ldd	r31, Y+2	; 0x02
     30c:	80 81       	ld	r24, Z
     30e:	88 23       	and	r24, r24
     310:	89 f7       	brne	.-30     	; 0x2f4 <USART_vid_SendString+0x10>
	{
		USART_vid_SendChar(*Copy_pu8_Str) ;
		Copy_pu8_Str++ ;
	}
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	cf 91       	pop	r28
     318:	df 91       	pop	r29
     31a:	08 95       	ret

0000031c <USART_u8_ReadChar>:

void USART_u8_ReadChar(u8* Copy_pu8_char)
{
     31c:	df 93       	push	r29
     31e:	cf 93       	push	r28
     320:	00 d0       	rcall	.+0      	; 0x322 <USART_u8_ReadChar+0x6>
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	9a 83       	std	Y+2, r25	; 0x02
     328:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(UCSRA,RXC))==0) ;
     32a:	eb e2       	ldi	r30, 0x2B	; 43
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	88 23       	and	r24, r24
     332:	dc f7       	brge	.-10     	; 0x32a <USART_u8_ReadChar+0xe>

	*Copy_pu8_char = UDR ;
     334:	ec e2       	ldi	r30, 0x2C	; 44
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	e9 81       	ldd	r30, Y+1	; 0x01
     33c:	fa 81       	ldd	r31, Y+2	; 0x02
     33e:	80 83       	st	Z, r24

}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	cf 91       	pop	r28
     346:	df 91       	pop	r29
     348:	08 95       	ret

0000034a <USART_vid_SetCallBack>:




void USART_vid_SetCallBack(void (*copy_ptr)(void),u8 Copy_u8_INT_Select)
{
     34a:	df 93       	push	r29
     34c:	cf 93       	push	r28
     34e:	00 d0       	rcall	.+0      	; 0x350 <USART_vid_SetCallBack+0x6>
     350:	0f 92       	push	r0
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
     35a:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8_INT_Select==USART_COMP_RX)
     35c:	8b 81       	ldd	r24, Y+3	; 0x03
     35e:	88 23       	and	r24, r24
     360:	39 f4       	brne	.+14     	; 0x370 <USART_vid_SetCallBack+0x26>
		USART_CallBack_ISR_COMP_RX=copy_ptr;
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	90 93 63 00 	sts	0x0063, r25
     36a:	80 93 62 00 	sts	0x0062, r24
     36e:	13 c0       	rjmp	.+38     	; 0x396 <USART_vid_SetCallBack+0x4c>
	else if(Copy_u8_INT_Select==USART_COMP_TX)
     370:	8b 81       	ldd	r24, Y+3	; 0x03
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	39 f4       	brne	.+14     	; 0x384 <USART_vid_SetCallBack+0x3a>
		USART_CallBack_COMP_TX=copy_ptr;
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	90 93 65 00 	sts	0x0065, r25
     37e:	80 93 64 00 	sts	0x0064, r24
     382:	09 c0       	rjmp	.+18     	; 0x396 <USART_vid_SetCallBack+0x4c>
	else if(Copy_u8_INT_Select==USART_DATA_EMBTY)
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	82 30       	cpi	r24, 0x02	; 2
     388:	31 f4       	brne	.+12     	; 0x396 <USART_vid_SetCallBack+0x4c>
		USART_CallBack_DATA_EMBTY=copy_ptr;
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	9a 81       	ldd	r25, Y+2	; 0x02
     38e:	90 93 61 00 	sts	0x0061, r25
     392:	80 93 60 00 	sts	0x0060, r24
}
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	cf 91       	pop	r28
     39e:	df 91       	pop	r29
     3a0:	08 95       	ret

000003a2 <USART_vid_Enable_RXInt>:

void USART_vid_Enable_RXInt(void)
{
     3a2:	df 93       	push	r29
     3a4:	cf 93       	push	r28
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(UCSRB,RXCIE) 
     3aa:	aa e2       	ldi	r26, 0x2A	; 42
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	ea e2       	ldi	r30, 0x2A	; 42
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	80 68       	ori	r24, 0x80	; 128
     3b6:	8c 93       	st	X, r24
}
     3b8:	cf 91       	pop	r28
     3ba:	df 91       	pop	r29
     3bc:	08 95       	ret

000003be <USART_vid_Disable_RXInt>:

void USART_vid_Disable_RXInt(void)
{
     3be:	df 93       	push	r29
     3c0:	cf 93       	push	r28
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE)
     3c6:	aa e2       	ldi	r26, 0x2A	; 42
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	ea e2       	ldi	r30, 0x2A	; 42
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	8f 77       	andi	r24, 0x7F	; 127
     3d2:	8c 93       	st	X, r24
}
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	08 95       	ret

000003da <USART_vid_Enable_TXInt>:

void USART_vid_Enable_TXInt(void)
{
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(UCSRB,TXCIE) 
     3e2:	aa e2       	ldi	r26, 0x2A	; 42
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	ea e2       	ldi	r30, 0x2A	; 42
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	80 64       	ori	r24, 0x40	; 64
     3ee:	8c 93       	st	X, r24
}
     3f0:	cf 91       	pop	r28
     3f2:	df 91       	pop	r29
     3f4:	08 95       	ret

000003f6 <USART_vid_Disable_TXInt>:
void USART_vid_Disable_TXInt(void)
{
     3f6:	df 93       	push	r29
     3f8:	cf 93       	push	r28
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
     3fe:	aa e2       	ldi	r26, 0x2A	; 42
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	ea e2       	ldi	r30, 0x2A	; 42
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	8f 7b       	andi	r24, 0xBF	; 191
     40a:	8c 93       	st	X, r24
}
     40c:	cf 91       	pop	r28
     40e:	df 91       	pop	r29
     410:	08 95       	ret

00000412 <USART_vid_Enable_DataEmptyInt>:

void USART_vid_Enable_DataEmptyInt(void)
{
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(UCSRB,UDRIE)
     41a:	aa e2       	ldi	r26, 0x2A	; 42
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	ea e2       	ldi	r30, 0x2A	; 42
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	80 62       	ori	r24, 0x20	; 32
     426:	8c 93       	st	X, r24
}
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	08 95       	ret

0000042e <USART_vid_Disable_DataEmptyInt>:

void USART_vid_Disable_DataEmptyInt(void)
{
     42e:	df 93       	push	r29
     430:	cf 93       	push	r28
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,UDRIE)
     436:	aa e2       	ldi	r26, 0x2A	; 42
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	ea e2       	ldi	r30, 0x2A	; 42
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	8f 7d       	andi	r24, 0xDF	; 223
     442:	8c 93       	st	X, r24
}
     444:	cf 91       	pop	r28
     446:	df 91       	pop	r29
     448:	08 95       	ret

0000044a <TIMER0_void_SetOVCallBack>:
///////////////////////////////////////////////Interrupts
/////////////////////////////////////timer_0
void (*TIMER0_OV_CallBack) (void) ;
void (*TIMER0_CTC_CallBack) (void) ;
void TIMER0_void_SetOVCallBack(void (*Copy_ptr) (void) )
{
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	00 d0       	rcall	.+0      	; 0x450 <TIMER0_void_SetOVCallBack+0x6>
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OV_CallBack = Copy_ptr ;
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	9a 81       	ldd	r25, Y+2	; 0x02
     45c:	90 93 6d 00 	sts	0x006D, r25
     460:	80 93 6c 00 	sts	0x006C, r24
}
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <TIMER0_void_SetCTCCallBack>:

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	00 d0       	rcall	.+0      	; 0x474 <TIMER0_void_SetCTCCallBack+0x6>
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CTC_CallBack = Copy_ptr ;
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	90 93 6b 00 	sts	0x006B, r25
     484:	80 93 6a 00 	sts	0x006A, r24
	
}
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	08 95       	ret

00000492 <__vector_11>:

void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	2f 93       	push	r18
     49e:	3f 93       	push	r19
     4a0:	4f 93       	push	r20
     4a2:	5f 93       	push	r21
     4a4:	6f 93       	push	r22
     4a6:	7f 93       	push	r23
     4a8:	8f 93       	push	r24
     4aa:	9f 93       	push	r25
     4ac:	af 93       	push	r26
     4ae:	bf 93       	push	r27
     4b0:	ef 93       	push	r30
     4b2:	ff 93       	push	r31
     4b4:	df 93       	push	r29
     4b6:	cf 93       	push	r28
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	
	TIMER0_OV_CallBack();
     4bc:	e0 91 6c 00 	lds	r30, 0x006C
     4c0:	f0 91 6d 00 	lds	r31, 0x006D
     4c4:	09 95       	icall
}
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	ff 91       	pop	r31
     4cc:	ef 91       	pop	r30
     4ce:	bf 91       	pop	r27
     4d0:	af 91       	pop	r26
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	7f 91       	pop	r23
     4d8:	6f 91       	pop	r22
     4da:	5f 91       	pop	r21
     4dc:	4f 91       	pop	r20
     4de:	3f 91       	pop	r19
     4e0:	2f 91       	pop	r18
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_10>:

void __vector_10(void) __attribute__((signal , used));

void __vector_10(void)
{
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CTC_CallBack();
     516:	e0 91 6a 00 	lds	r30, 0x006A
     51a:	f0 91 6b 00 	lds	r31, 0x006B
     51e:	09 95       	icall
}
     520:	cf 91       	pop	r28
     522:	df 91       	pop	r29
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <TIMER2_void_SetOVCallBack>:
///////////////////////////////////////timer_2
void (*TIMER2_OV_CallBack) (void) ;
void (*TIMER2_CTC_CallBack) (void) ;
void TIMER2_void_SetOVCallBack(void (*Copy_ptr) (void) )
{
     546:	df 93       	push	r29
     548:	cf 93       	push	r28
     54a:	00 d0       	rcall	.+0      	; 0x54c <TIMER2_void_SetOVCallBack+0x6>
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	9a 83       	std	Y+2, r25	; 0x02
     552:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_OV_CallBack = Copy_ptr ;
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	9a 81       	ldd	r25, Y+2	; 0x02
     558:	90 93 69 00 	sts	0x0069, r25
     55c:	80 93 68 00 	sts	0x0068, r24
}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <TIMER2_void_SetCTCCallBack>:

void TIMER2_void_SetCTCCallBack(void (*Copy_ptr) (void) )
{
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	00 d0       	rcall	.+0      	; 0x570 <TIMER2_void_SetCTCCallBack+0x6>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	9a 83       	std	Y+2, r25	; 0x02
     576:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_CTC_CallBack = Copy_ptr ;
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	9a 81       	ldd	r25, Y+2	; 0x02
     57c:	90 93 67 00 	sts	0x0067, r25
     580:	80 93 66 00 	sts	0x0066, r24

}
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	08 95       	ret

0000058e <__vector_5>:

void __vector_5(void) __attribute__((signal , used));
void __vector_5(void)
{
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
     5b0:	df 93       	push	r29
     5b2:	cf 93       	push	r28
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62

	TIMER2_OV_CallBack();
     5b8:	e0 91 68 00 	lds	r30, 0x0068
     5bc:	f0 91 69 00 	lds	r31, 0x0069
     5c0:	09 95       	icall
}
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	ff 91       	pop	r31
     5c8:	ef 91       	pop	r30
     5ca:	bf 91       	pop	r27
     5cc:	af 91       	pop	r26
     5ce:	9f 91       	pop	r25
     5d0:	8f 91       	pop	r24
     5d2:	7f 91       	pop	r23
     5d4:	6f 91       	pop	r22
     5d6:	5f 91       	pop	r21
     5d8:	4f 91       	pop	r20
     5da:	3f 91       	pop	r19
     5dc:	2f 91       	pop	r18
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <__vector_4>:

void __vector_4(void) __attribute__((signal , used));

void __vector_4(void)
{
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	2f 93       	push	r18
     5f4:	3f 93       	push	r19
     5f6:	4f 93       	push	r20
     5f8:	5f 93       	push	r21
     5fa:	6f 93       	push	r22
     5fc:	7f 93       	push	r23
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	af 93       	push	r26
     604:	bf 93       	push	r27
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
	TIMER2_CTC_CallBack();
     612:	e0 91 66 00 	lds	r30, 0x0066
     616:	f0 91 67 00 	lds	r31, 0x0067
     61a:	09 95       	icall
}
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	bf 91       	pop	r27
     626:	af 91       	pop	r26
     628:	9f 91       	pop	r25
     62a:	8f 91       	pop	r24
     62c:	7f 91       	pop	r23
     62e:	6f 91       	pop	r22
     630:	5f 91       	pop	r21
     632:	4f 91       	pop	r20
     634:	3f 91       	pop	r19
     636:	2f 91       	pop	r18
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <TIMER0_vid_Init>:
////////////////////////////
void TIMER0_vid_Init(void)
{
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TCCR0 , COM00)
			SET_BIT(TCCR0 , COM01)
		#endif

	#elif(TIMER_u8_TIMER0_MODE == TIMER_u8_FAST_PWM )
		SET_BIT(TCCR0 , WGM00)
     64a:	a3 e5       	ldi	r26, 0x53	; 83
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	e3 e5       	ldi	r30, 0x53	; 83
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	80 64       	ori	r24, 0x40	; 64
     656:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , WGM01)
     658:	a3 e5       	ldi	r26, 0x53	; 83
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	e3 e5       	ldi	r30, 0x53	; 83
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	88 60       	ori	r24, 0x08	; 8
     664:	8c 93       	st	X, r24
		#if(TIMER_u8_TIMER0_EVENT == TIMER_u8_NO_ACTION)
			CLEAR_BIT(TCCR0 , COM00)
			CLEAR_BIT(TCCR0 , COM01)
		#elif(TIMER_u8_TIMER0_EVENT == TIMER_u8_CLEAR )
			CLEAR_BIT(TCCR0 , COM00)
     666:	a3 e5       	ldi	r26, 0x53	; 83
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e3 e5       	ldi	r30, 0x53	; 83
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	8f 7e       	andi	r24, 0xEF	; 239
     672:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , COM01)
     674:	a3 e5       	ldi	r26, 0x53	; 83
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	e3 e5       	ldi	r30, 0x53	; 83
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	80 62       	ori	r24, 0x20	; 32
     680:	8c 93       	st	X, r24
	#elif(TIMER_u8_TIMER0_CLOCK_MODE == TIMER_u8_INTERNAL_CLOCK_PRE_64 )
		SET_BIT(TCCR0 , CS00)
		SET_BIT(TCCR0 , CS01)
		CLEAR_BIT(TCCR0 , CS02)
	#elif(TIMER_u8_TIMER0_CLOCK_MODE == TIMER_u8_INTERNAL_CLOCK_PRE_256 )
		CLEAR_BIT(TCCR0 , CS00)
     682:	a3 e5       	ldi	r26, 0x53	; 83
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e3 e5       	ldi	r30, 0x53	; 83
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	8e 7f       	andi	r24, 0xFE	; 254
     68e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , CS01)
     690:	a3 e5       	ldi	r26, 0x53	; 83
     692:	b0 e0       	ldi	r27, 0x00	; 0
     694:	e3 e5       	ldi	r30, 0x53	; 83
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	8d 7f       	andi	r24, 0xFD	; 253
     69c:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , CS02)
     69e:	a3 e5       	ldi	r26, 0x53	; 83
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e3 e5       	ldi	r30, 0x53	; 83
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	84 60       	ori	r24, 0x04	; 4
     6aa:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , CS00)
		SET_BIT(TCCR0 , CS02)

	#endif
	//////////////////////////Disable Interrupts
	CLEAR_BIT(TIMSK , TOIE0)
     6ac:	a9 e5       	ldi	r26, 0x59	; 89
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	e9 e5       	ldi	r30, 0x59	; 89
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	8e 7f       	andi	r24, 0xFE	; 254
     6b8:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , OCIE0)
     6ba:	a9 e5       	ldi	r26, 0x59	; 89
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	e9 e5       	ldi	r30, 0x59	; 89
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	8d 7f       	andi	r24, 0xFD	; 253
     6c6:	8c 93       	st	X, r24
	//////////////////////////CLEAR FLAGS
	SET_BIT(TIFR , TOV0)
     6c8:	a8 e5       	ldi	r26, 0x58	; 88
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	e8 e5       	ldi	r30, 0x58	; 88
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	81 60       	ori	r24, 0x01	; 1
     6d4:	8c 93       	st	X, r24
	SET_BIT(TIFR , OCF0)
     6d6:	a8 e5       	ldi	r26, 0x58	; 88
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	e8 e5       	ldi	r30, 0x58	; 88
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	82 60       	ori	r24, 0x02	; 2
     6e2:	8c 93       	st	X, r24
	///////////////////////////Clear register
	TCNT0 = 0x00 ;
     6e4:	e2 e5       	ldi	r30, 0x52	; 82
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	10 82       	st	Z, r1
	OCR0 = 0x00 ;
     6ea:	ec e5       	ldi	r30, 0x5C	; 92
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	10 82       	st	Z, r1
}
     6f0:	cf 91       	pop	r28
     6f2:	df 91       	pop	r29
     6f4:	08 95       	ret

000006f6 <TIMER0_void_SetTimerReg>:
void TIMER0_void_SetTimerReg(u8 Copy_u8Val)
{
     6f6:	df 93       	push	r29
     6f8:	cf 93       	push	r28
     6fa:	0f 92       	push	r0
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Val ;
     702:	e2 e5       	ldi	r30, 0x52	; 82
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	89 81       	ldd	r24, Y+1	; 0x01
     708:	80 83       	st	Z, r24
}
     70a:	0f 90       	pop	r0
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <TIMER0_vid_SetCompareReg>:

void TIMER0_vid_SetCompareReg(u8 Copy_u8Val)
{
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	0f 92       	push	r0
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Val ;
     71e:	ec e5       	ldi	r30, 0x5C	; 92
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	80 83       	st	Z, r24
}
     726:	0f 90       	pop	r0
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	08 95       	ret

0000072e <TIMER0_void_EnableOVInt>:

void TIMER0_void_EnableOVInt(void)
{
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TOIE0)
     736:	a9 e5       	ldi	r26, 0x59	; 89
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e9 e5       	ldi	r30, 0x59	; 89
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	81 60       	ori	r24, 0x01	; 1
     742:	8c 93       	st	X, r24
}
     744:	cf 91       	pop	r28
     746:	df 91       	pop	r29
     748:	08 95       	ret

0000074a <TIMER0_void_DisableOVInt>:

void TIMER0_void_DisableOVInt(void)
{
     74a:	df 93       	push	r29
     74c:	cf 93       	push	r28
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TOIE0)
     752:	a9 e5       	ldi	r26, 0x59	; 89
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e9 e5       	ldi	r30, 0x59	; 89
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	8e 7f       	andi	r24, 0xFE	; 254
     75e:	8c 93       	st	X, r24
}
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <TIMER0_void_EnableCTCInt>:
void TIMER0_void_EnableCTCInt(void)
{
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , OCIE0)
     76e:	a9 e5       	ldi	r26, 0x59	; 89
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	e9 e5       	ldi	r30, 0x59	; 89
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	82 60       	ori	r24, 0x02	; 2
     77a:	8c 93       	st	X, r24
}
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	08 95       	ret

00000782 <TIMER0_void_DisableCTCInt>:

void TIMER0_void_DisableCTCInt(void)
{
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , OCIE0)
     78a:	a9 e5       	ldi	r26, 0x59	; 89
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e9 e5       	ldi	r30, 0x59	; 89
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	8d 7f       	andi	r24, 0xFD	; 253
     796:	8c 93       	st	X, r24
}
     798:	cf 91       	pop	r28
     79a:	df 91       	pop	r29
     79c:	08 95       	ret

0000079e <TIMER2_vid_Init>:
////////////////////////////////////////////////////////////TIMER_2
void TIMER2_vid_Init(void)
{
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TCCR2 , COM20)
			SET_BIT(TCCR2 , COM21)
		#endif
		
	#elif(TIMER_u8_TIMER2_MODE == TIMER_u8_FAST_PWM )
		SET_BIT(TCCR2 , WGM20)
     7a6:	a5 e4       	ldi	r26, 0x45	; 69
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	e5 e4       	ldi	r30, 0x45	; 69
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	80 64       	ori	r24, 0x40	; 64
     7b2:	8c 93       	st	X, r24
		SET_BIT(TCCR2 , WGM21)
     7b4:	a5 e4       	ldi	r26, 0x45	; 69
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	e5 e4       	ldi	r30, 0x45	; 69
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	88 60       	ori	r24, 0x08	; 8
     7c0:	8c 93       	st	X, r24
		#if(TIMER_u8_TIMER2_EVENT == TIMER_u8_NO_ACTION)
			CLEAR_BIT(TCCR2 , COM20)
			CLEAR_BIT(TCCR2 , COM21)
		#elif(TIMER_u8_TIMER2_EVENT == TIMER_u8_CLEAR )
			CLEAR_BIT(TCCR2 , COM20)
     7c2:	a5 e4       	ldi	r26, 0x45	; 69
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	e5 e4       	ldi	r30, 0x45	; 69
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	8f 7e       	andi	r24, 0xEF	; 239
     7ce:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , COM21)
     7d0:	a5 e4       	ldi	r26, 0x45	; 69
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	e5 e4       	ldi	r30, 0x45	; 69
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	80 62       	ori	r24, 0x20	; 32
     7dc:	8c 93       	st	X, r24
	#elif(TIMER_u8_TIMER2_CLOCK_MODE == TIMER_u8_INTERNAL_CLOCK_PRE_64 )
		SET_BIT(TCCR2 , CS20)
		SET_BIT(TCCR2 , CS21)
		CLEAR_BIT(TCCR2 , CS22)
	#elif(TIMER_u8_TIMER2_CLOCK_MODE == TIMER_u8_INTERNAL_CLOCK_PRE_256 )
		CLEAR_BIT(TCCR2 , CS20)
     7de:	a5 e4       	ldi	r26, 0x45	; 69
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	e5 e4       	ldi	r30, 0x45	; 69
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	8e 7f       	andi	r24, 0xFE	; 254
     7ea:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2 , CS21)
     7ec:	a5 e4       	ldi	r26, 0x45	; 69
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	e5 e4       	ldi	r30, 0x45	; 69
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	8d 7f       	andi	r24, 0xFD	; 253
     7f8:	8c 93       	st	X, r24
		SET_BIT(TCCR2 , CS22)
     7fa:	a5 e4       	ldi	r26, 0x45	; 69
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e5 e4       	ldi	r30, 0x45	; 69
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	84 60       	ori	r24, 0x04	; 4
     806:	8c 93       	st	X, r24
		SET_BIT(TCCR2 , CS20)
		SET_BIT(TCCR2 , CS22)
		
	#endif
	//////////////////////////Disable Interrupts
	CLEAR_BIT(TIMSK , TOIE2)
     808:	a9 e5       	ldi	r26, 0x59	; 89
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e9 e5       	ldi	r30, 0x59	; 89
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	8f 7b       	andi	r24, 0xBF	; 191
     814:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK , OCIE2)
     816:	a9 e5       	ldi	r26, 0x59	; 89
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e9 e5       	ldi	r30, 0x59	; 89
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	8f 77       	andi	r24, 0x7F	; 127
     822:	8c 93       	st	X, r24
	//////////////////////////CLEAR FLAGS
	SET_BIT(TIFR , TOV2)
     824:	a8 e5       	ldi	r26, 0x58	; 88
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e8 e5       	ldi	r30, 0x58	; 88
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	80 64       	ori	r24, 0x40	; 64
     830:	8c 93       	st	X, r24
	SET_BIT(TIFR , OCF2)
     832:	a8 e5       	ldi	r26, 0x58	; 88
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	e8 e5       	ldi	r30, 0x58	; 88
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	80 68       	ori	r24, 0x80	; 128
     83e:	8c 93       	st	X, r24
	///////////////////////////Clear register
	TCNT2 = 0x00 ;
     840:	e4 e4       	ldi	r30, 0x44	; 68
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	10 82       	st	Z, r1
	OCR2 = 0x00 ;
     846:	e3 e4       	ldi	r30, 0x43	; 67
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	10 82       	st	Z, r1
}
     84c:	cf 91       	pop	r28
     84e:	df 91       	pop	r29
     850:	08 95       	ret

00000852 <TIMER2_void_SetTimerReg>:
void TIMER2_void_SetTimerReg(u8 Copy_u8Val)
{
     852:	df 93       	push	r29
     854:	cf 93       	push	r28
     856:	0f 92       	push	r0
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Val ;
     85e:	e4 e4       	ldi	r30, 0x44	; 68
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	80 83       	st	Z, r24
}
     866:	0f 90       	pop	r0
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	08 95       	ret

0000086e <TIMER2_vid_SetCompareReg>:

void TIMER2_vid_SetCompareReg(u8 Copy_u8Val)
{
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	0f 92       	push	r0
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Val ;
     87a:	e3 e4       	ldi	r30, 0x43	; 67
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	80 83       	st	Z, r24
}
     882:	0f 90       	pop	r0
     884:	cf 91       	pop	r28
     886:	df 91       	pop	r29
     888:	08 95       	ret

0000088a <TIMER2_void_EnableOVInt>:

void TIMER2_void_EnableOVInt(void)
{
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , TOIE2)
     892:	a9 e5       	ldi	r26, 0x59	; 89
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	e9 e5       	ldi	r30, 0x59	; 89
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	80 64       	ori	r24, 0x40	; 64
     89e:	8c 93       	st	X, r24
}
     8a0:	cf 91       	pop	r28
     8a2:	df 91       	pop	r29
     8a4:	08 95       	ret

000008a6 <TIMER2_void_DisableOVInt>:

void TIMER2_void_DisableOVInt(void)
{
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , TOIE2)
     8ae:	a9 e5       	ldi	r26, 0x59	; 89
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	e9 e5       	ldi	r30, 0x59	; 89
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	8f 7b       	andi	r24, 0xBF	; 191
     8ba:	8c 93       	st	X, r24
}
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	08 95       	ret

000008c2 <TIMER2_void_EnableCTCInt>:
void TIMER2_void_EnableCTCInt(void)
{
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK , OCIE2)
     8ca:	a9 e5       	ldi	r26, 0x59	; 89
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	e9 e5       	ldi	r30, 0x59	; 89
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	80 68       	ori	r24, 0x80	; 128
     8d6:	8c 93       	st	X, r24
}
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <TIMER2_void_DisableCTCInt>:

void TIMER2_void_DisableCTCInt(void)
{
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK , OCIE2)
     8e6:	a9 e5       	ldi	r26, 0x59	; 89
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	e9 e5       	ldi	r30, 0x59	; 89
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	8f 77       	andi	r24, 0x7F	; 127
     8f2:	8c 93       	st	X, r24
}
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	08 95       	ret

000008fa <GIE_vid_INTERENABLE>:
#include "GIE_config.h"
#include "GIE_priv.h"


void GIE_vid_INTERENABLE   (void)
{
     8fa:	df 93       	push	r29
     8fc:	cf 93       	push	r28
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SRGE,I_BIT)
     902:	af e5       	ldi	r26, 0x5F	; 95
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	ef e5       	ldi	r30, 0x5F	; 95
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	80 68       	ori	r24, 0x80	; 128
     90e:	8c 93       	st	X, r24
}
     910:	cf 91       	pop	r28
     912:	df 91       	pop	r29
     914:	08 95       	ret

00000916 <GIE_vid_INTERDISABLE>:
void GIE_vid_INTERDISABLE (void)
{
     916:	df 93       	push	r29
     918:	cf 93       	push	r28
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT(SRGE,I_BIT)
     91e:	af e5       	ldi	r26, 0x5F	; 95
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	ef e5       	ldi	r30, 0x5F	; 95
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8f 77       	andi	r24, 0x7F	; 127
     92a:	8c 93       	st	X, r24
}
     92c:	cf 91       	pop	r28
     92e:	df 91       	pop	r29
     930:	08 95       	ret

00000932 <DIO_vid_Init>:




void DIO_vid_Init(void)
{
     932:	df 93       	push	r29
     934:	cf 93       	push	r28
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
	DDRA=DIO_u8_PORTA_DIRECTION;
     93a:	ea e3       	ldi	r30, 0x3A	; 58
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	80 83       	st	Z, r24
	DDRB=DIO_u8_PORTB_DIRECTION;
     942:	e7 e3       	ldi	r30, 0x37	; 55
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	80 83       	st	Z, r24
	DDRC=DIO_u8_PORTC_DIRECTION;
     94a:	e4 e3       	ldi	r30, 0x34	; 52
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	80 83       	st	Z, r24
	DDRD=DIO_u8_PORTD_DIRECTION;
     952:	e1 e3       	ldi	r30, 0x31	; 49
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	8e ef       	ldi	r24, 0xFE	; 254
     958:	80 83       	st	Z, r24
	
}
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <DIO_vid_SetPinVal>:

void DIO_vid_SetPinVal(u8 copy_u8_PinNo,u8 copy_u8_PinVal)
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	00 d0       	rcall	.+0      	; 0x966 <DIO_vid_SetPinVal+0x6>
     966:	00 d0       	rcall	.+0      	; 0x968 <DIO_vid_SetPinVal+0x8>
     968:	00 d0       	rcall	.+0      	; 0x96a <DIO_vid_SetPinVal+0xa>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	6c 83       	std	Y+4, r22	; 0x04
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers;
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	87 70       	andi	r24, 0x07	; 7
     976:	8a 83       	std	Y+2, r24	; 0x02
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	86 95       	lsr	r24
     97c:	86 95       	lsr	r24
     97e:	86 95       	lsr	r24
     980:	89 83       	std	Y+1, r24	; 0x01
	switch(loc_u8_PortNo)
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	3e 83       	std	Y+6, r19	; 0x06
     98a:	2d 83       	std	Y+5, r18	; 0x05
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	9e 81       	ldd	r25, Y+6	; 0x06
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	91 05       	cpc	r25, r1
     994:	09 f4       	brne	.+2      	; 0x998 <DIO_vid_SetPinVal+0x38>
     996:	47 c0       	rjmp	.+142    	; 0xa26 <DIO_vid_SetPinVal+0xc6>
     998:	2d 81       	ldd	r18, Y+5	; 0x05
     99a:	3e 81       	ldd	r19, Y+6	; 0x06
     99c:	22 30       	cpi	r18, 0x02	; 2
     99e:	31 05       	cpc	r19, r1
     9a0:	2c f4       	brge	.+10     	; 0x9ac <DIO_vid_SetPinVal+0x4c>
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	71 f0       	breq	.+28     	; 0x9c6 <DIO_vid_SetPinVal+0x66>
     9aa:	cb c0       	rjmp	.+406    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
     9ac:	2d 81       	ldd	r18, Y+5	; 0x05
     9ae:	3e 81       	ldd	r19, Y+6	; 0x06
     9b0:	22 30       	cpi	r18, 0x02	; 2
     9b2:	31 05       	cpc	r19, r1
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <DIO_vid_SetPinVal+0x58>
     9b6:	67 c0       	rjmp	.+206    	; 0xa86 <DIO_vid_SetPinVal+0x126>
     9b8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ba:	9e 81       	ldd	r25, Y+6	; 0x06
     9bc:	83 30       	cpi	r24, 0x03	; 3
     9be:	91 05       	cpc	r25, r1
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <DIO_vid_SetPinVal+0x64>
     9c2:	91 c0       	rjmp	.+290    	; 0xae6 <DIO_vid_SetPinVal+0x186>
     9c4:	be c0       	rjmp	.+380    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
	{
		case Port_A:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
     9c6:	8c 81       	ldd	r24, Y+4	; 0x04
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	a1 f4       	brne	.+40     	; 0x9f4 <DIO_vid_SetPinVal+0x94>
				SET_BIT(PORTA,loc_u8_PinNo)
     9cc:	ab e3       	ldi	r26, 0x3B	; 59
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	eb e3       	ldi	r30, 0x3B	; 59
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	48 2f       	mov	r20, r24
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	28 2f       	mov	r18, r24
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 2e       	mov	r0, r18
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_vid_SetPinVal+0x8a>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	0a 94       	dec	r0
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_vid_SetPinVal+0x86>
     9ee:	84 2b       	or	r24, r20
     9f0:	8c 93       	st	X, r24
     9f2:	a7 c0       	rjmp	.+334    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
				//PORTA=PORTA | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
     9f4:	8c 81       	ldd	r24, Y+4	; 0x04
     9f6:	88 23       	and	r24, r24
     9f8:	09 f0       	breq	.+2      	; 0x9fc <DIO_vid_SetPinVal+0x9c>
     9fa:	a3 c0       	rjmp	.+326    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTA,loc_u8_PinNo)
     9fc:	ab e3       	ldi	r26, 0x3B	; 59
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	eb e3       	ldi	r30, 0x3B	; 59
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	48 2f       	mov	r20, r24
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	28 2f       	mov	r18, r24
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	02 2e       	mov	r0, r18
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_vid_SetPinVal+0xba>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	0a 94       	dec	r0
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_vid_SetPinVal+0xb6>
     a1e:	80 95       	com	r24
     a20:	84 23       	and	r24, r20
     a22:	8c 93       	st	X, r24
     a24:	8e c0       	rjmp	.+284    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
			//PORTA=PORTA & ~(1<<loc_u8_PinNo);
			break;}
		case Port_B:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
     a26:	8c 81       	ldd	r24, Y+4	; 0x04
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	a1 f4       	brne	.+40     	; 0xa54 <DIO_vid_SetPinVal+0xf4>
				SET_BIT(PORTB,loc_u8_PinNo)
     a2c:	a8 e3       	ldi	r26, 0x38	; 56
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e8 e3       	ldi	r30, 0x38	; 56
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	48 2f       	mov	r20, r24
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 2e       	mov	r0, r18
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <DIO_vid_SetPinVal+0xea>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	0a 94       	dec	r0
     a4c:	e2 f7       	brpl	.-8      	; 0xa46 <DIO_vid_SetPinVal+0xe6>
     a4e:	84 2b       	or	r24, r20
     a50:	8c 93       	st	X, r24
     a52:	77 c0       	rjmp	.+238    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>

			//PORTB=PORTB | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	88 23       	and	r24, r24
     a58:	09 f0       	breq	.+2      	; 0xa5c <DIO_vid_SetPinVal+0xfc>
     a5a:	73 c0       	rjmp	.+230    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTB,loc_u8_PinNo)
     a5c:	a8 e3       	ldi	r26, 0x38	; 56
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	e8 e3       	ldi	r30, 0x38	; 56
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	48 2f       	mov	r20, r24
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
     a6a:	28 2f       	mov	r18, r24
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 2e       	mov	r0, r18
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_vid_SetPinVal+0x11a>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	0a 94       	dec	r0
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_vid_SetPinVal+0x116>
     a7e:	80 95       	com	r24
     a80:	84 23       	and	r24, r20
     a82:	8c 93       	st	X, r24
     a84:	5e c0       	rjmp	.+188    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
			//PORTB=PORTB & ~(1<<loc_u8_PinNo);
			break;}
		case Port_C:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
     a86:	8c 81       	ldd	r24, Y+4	; 0x04
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	a1 f4       	brne	.+40     	; 0xab4 <DIO_vid_SetPinVal+0x154>
				SET_BIT(PORTC,loc_u8_PinNo)
     a8c:	a5 e3       	ldi	r26, 0x35	; 53
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e5 e3       	ldi	r30, 0x35	; 53
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	48 2f       	mov	r20, r24
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	28 2f       	mov	r18, r24
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 2e       	mov	r0, r18
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_vid_SetPinVal+0x14a>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	0a 94       	dec	r0
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_vid_SetPinVal+0x146>
     aae:	84 2b       	or	r24, r20
     ab0:	8c 93       	st	X, r24
     ab2:	47 c0       	rjmp	.+142    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
			//PORTC=PORTC | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
     ab4:	8c 81       	ldd	r24, Y+4	; 0x04
     ab6:	88 23       	and	r24, r24
     ab8:	09 f0       	breq	.+2      	; 0xabc <DIO_vid_SetPinVal+0x15c>
     aba:	43 c0       	rjmp	.+134    	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTC,loc_u8_PinNo)
     abc:	a5 e3       	ldi	r26, 0x35	; 53
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e5 e3       	ldi	r30, 0x35	; 53
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	48 2f       	mov	r20, r24
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	28 2f       	mov	r18, r24
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 2e       	mov	r0, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_vid_SetPinVal+0x17a>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	0a 94       	dec	r0
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_vid_SetPinVal+0x176>
     ade:	80 95       	com	r24
     ae0:	84 23       	and	r24, r20
     ae2:	8c 93       	st	X, r24
     ae4:	2e c0       	rjmp	.+92     	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
			//PORTC=PORTC & ~(1<<loc_u8_PinNo);
			break;}
		case Port_D:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
     ae6:	8c 81       	ldd	r24, Y+4	; 0x04
     ae8:	81 30       	cpi	r24, 0x01	; 1
     aea:	a1 f4       	brne	.+40     	; 0xb14 <DIO_vid_SetPinVal+0x1b4>
				SET_BIT(PORTD,loc_u8_PinNo)
     aec:	a2 e3       	ldi	r26, 0x32	; 50
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e2 e3       	ldi	r30, 0x32	; 50
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 2e       	mov	r0, r18
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_vid_SetPinVal+0x1aa>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_vid_SetPinVal+0x1a6>
     b0e:	84 2b       	or	r24, r20
     b10:	8c 93       	st	X, r24
     b12:	17 c0       	rjmp	.+46     	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
			//PORTD=PORTD | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
     b14:	8c 81       	ldd	r24, Y+4	; 0x04
     b16:	88 23       	and	r24, r24
     b18:	a1 f4       	brne	.+40     	; 0xb42 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTD,loc_u8_PinNo)
     b1a:	a2 e3       	ldi	r26, 0x32	; 50
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	e2 e3       	ldi	r30, 0x32	; 50
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	48 2f       	mov	r20, r24
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	28 2f       	mov	r18, r24
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 2e       	mov	r0, r18
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <DIO_vid_SetPinVal+0x1d8>
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	0a 94       	dec	r0
     b3a:	e2 f7       	brpl	.-8      	; 0xb34 <DIO_vid_SetPinVal+0x1d4>
     b3c:	80 95       	com	r24
     b3e:	84 23       	and	r24, r20
     b40:	8c 93       	st	X, r24
			//PORTD=PORTD & ~(1<<loc_u8_PinNo);
			break;}
	}
	
}
     b42:	26 96       	adiw	r28, 0x06	; 6
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <DIO_vid_ClearPinVal>:

void DIO_vid_ClearPinVal(u8 copy_u8_PinNo,u8 copy_u8_PinVal)
{DIO_vid_SetPinVal(copy_u8_PinNo,DIO_u8_LOW);}
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	00 d0       	rcall	.+0      	; 0xb5a <DIO_vid_ClearPinVal+0x6>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	6a 83       	std	Y+2, r22	; 0x02
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_vid_SetPinConf>:




void DIO_vid_SetPinConf(u8 copy_u8_PinNo,u8 copy_u8_PinType)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <DIO_vid_SetPinConf+0x6>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <DIO_vid_SetPinConf+0x8>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <DIO_vid_SetPinConf+0xa>
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	8b 83       	std	Y+3, r24	; 0x03
     b84:	6c 83       	std	Y+4, r22	; 0x04
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers;
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	87 70       	andi	r24, 0x07	; 7
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	86 95       	lsr	r24
     b90:	86 95       	lsr	r24
     b92:	86 95       	lsr	r24
     b94:	89 83       	std	Y+1, r24	; 0x01
	switch(loc_u8_PortNo)
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3e 83       	std	Y+6, r19	; 0x06
     b9e:	2d 83       	std	Y+5, r18	; 0x05
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	9e 81       	ldd	r25, Y+6	; 0x06
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <DIO_vid_SetPinConf+0x38>
     baa:	5a c0       	rjmp	.+180    	; 0xc60 <DIO_vid_SetPinConf+0xec>
     bac:	2d 81       	ldd	r18, Y+5	; 0x05
     bae:	3e 81       	ldd	r19, Y+6	; 0x06
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	31 05       	cpc	r19, r1
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <DIO_vid_SetPinConf+0x4c>
     bb6:	8d 81       	ldd	r24, Y+5	; 0x05
     bb8:	9e 81       	ldd	r25, Y+6	; 0x06
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	71 f0       	breq	.+28     	; 0xbda <DIO_vid_SetPinConf+0x66>
     bbe:	17 c1       	rjmp	.+558    	; 0xdee <DIO_vid_SetPinConf+0x27a>
     bc0:	2d 81       	ldd	r18, Y+5	; 0x05
     bc2:	3e 81       	ldd	r19, Y+6	; 0x06
     bc4:	22 30       	cpi	r18, 0x02	; 2
     bc6:	31 05       	cpc	r19, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <DIO_vid_SetPinConf+0x58>
     bca:	8d c0       	rjmp	.+282    	; 0xce6 <DIO_vid_SetPinConf+0x172>
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <DIO_vid_SetPinConf+0x64>
     bd6:	ca c0       	rjmp	.+404    	; 0xd6c <DIO_vid_SetPinConf+0x1f8>
     bd8:	0a c1       	rjmp	.+532    	; 0xdee <DIO_vid_SetPinConf+0x27a>
	{
		case Port_A:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
     bda:	8c 81       	ldd	r24, Y+4	; 0x04
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	a1 f4       	brne	.+40     	; 0xc08 <DIO_vid_SetPinConf+0x94>
				SET_BIT(DDRA,loc_u8_PinNo)
     be0:	aa e3       	ldi	r26, 0x3A	; 58
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ea e3       	ldi	r30, 0x3A	; 58
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	48 2f       	mov	r20, r24
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	02 2e       	mov	r0, r18
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <DIO_vid_SetPinConf+0x8a>
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <DIO_vid_SetPinConf+0x86>
     c02:	84 2b       	or	r24, r20
     c04:	8c 93       	st	X, r24
     c06:	f3 c0       	rjmp	.+486    	; 0xdee <DIO_vid_SetPinConf+0x27a>
				//PORTA=PORTA | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	88 23       	and	r24, r24
     c0c:	09 f0       	breq	.+2      	; 0xc10 <DIO_vid_SetPinConf+0x9c>
     c0e:	ef c0       	rjmp	.+478    	; 0xdee <DIO_vid_SetPinConf+0x27a>
			{CLEAR_BIT(DDRA,loc_u8_PinNo)
     c10:	aa e3       	ldi	r26, 0x3A	; 58
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ea e3       	ldi	r30, 0x3A	; 58
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	48 2f       	mov	r20, r24
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <DIO_vid_SetPinConf+0xb8>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	2a 95       	dec	r18
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <DIO_vid_SetPinConf+0xb4>
     c30:	80 95       	com	r24
     c32:	84 23       	and	r24, r20
     c34:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,loc_u8_PinNo)}
     c36:	ab e3       	ldi	r26, 0x3B	; 59
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	eb e3       	ldi	r30, 0x3B	; 59
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <DIO_vid_SetPinConf+0xe0>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <DIO_vid_SetPinConf+0xdc>
     c58:	80 95       	com	r24
     c5a:	84 23       	and	r24, r20
     c5c:	8c 93       	st	X, r24
     c5e:	c7 c0       	rjmp	.+398    	; 0xdee <DIO_vid_SetPinConf+0x27a>
			//PORTA=PORTA & ~(1<<loc_u8_PinNo);
			break;}
		case Port_B:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	a1 f4       	brne	.+40     	; 0xc8e <DIO_vid_SetPinConf+0x11a>
				SET_BIT(DDRB,loc_u8_PinNo)
     c66:	a7 e3       	ldi	r26, 0x37	; 55
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e7 e3       	ldi	r30, 0x37	; 55
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	48 2f       	mov	r20, r24
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 2e       	mov	r0, r18
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_vid_SetPinConf+0x110>
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	0a 94       	dec	r0
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_vid_SetPinConf+0x10c>
     c88:	84 2b       	or	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	b0 c0       	rjmp	.+352    	; 0xdee <DIO_vid_SetPinConf+0x27a>

			//PORTB=PORTB | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
     c8e:	8c 81       	ldd	r24, Y+4	; 0x04
     c90:	88 23       	and	r24, r24
     c92:	09 f0       	breq	.+2      	; 0xc96 <DIO_vid_SetPinConf+0x122>
     c94:	ac c0       	rjmp	.+344    	; 0xdee <DIO_vid_SetPinConf+0x27a>
				{CLEAR_BIT(DDRB,loc_u8_PinNo)
     c96:	a7 e3       	ldi	r26, 0x37	; 55
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e7 e3       	ldi	r30, 0x37	; 55
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <DIO_vid_SetPinConf+0x13e>
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	2a 95       	dec	r18
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <DIO_vid_SetPinConf+0x13a>
     cb6:	80 95       	com	r24
     cb8:	84 23       	and	r24, r20
     cba:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,loc_u8_PinNo)}
     cbc:	a8 e3       	ldi	r26, 0x38	; 56
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e8 e3       	ldi	r30, 0x38	; 56
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_vid_SetPinConf+0x166>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_vid_SetPinConf+0x162>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	84 c0       	rjmp	.+264    	; 0xdee <DIO_vid_SetPinConf+0x27a>
			//PORTB=PORTB & ~(1<<loc_u8_PinNo);
			break;}
		case Port_C:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	a1 f4       	brne	.+40     	; 0xd14 <DIO_vid_SetPinConf+0x1a0>
				SET_BIT(DDRC,loc_u8_PinNo)
     cec:	a4 e3       	ldi	r26, 0x34	; 52
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e4 e3       	ldi	r30, 0x34	; 52
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_vid_SetPinConf+0x196>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_vid_SetPinConf+0x192>
     d0e:	84 2b       	or	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	6d c0       	rjmp	.+218    	; 0xdee <DIO_vid_SetPinConf+0x27a>
			//PORTC=PORTC | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	09 f0       	breq	.+2      	; 0xd1c <DIO_vid_SetPinConf+0x1a8>
     d1a:	69 c0       	rjmp	.+210    	; 0xdee <DIO_vid_SetPinConf+0x27a>
				{CLEAR_BIT(DDRB,loc_u8_PinNo)
     d1c:	a7 e3       	ldi	r26, 0x37	; 55
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e3       	ldi	r30, 0x37	; 55
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_vid_SetPinConf+0x1c4>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	2a 95       	dec	r18
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_vid_SetPinConf+0x1c0>
     d3c:	80 95       	com	r24
     d3e:	84 23       	and	r24, r20
     d40:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,loc_u8_PinNo)}
     d42:	a8 e3       	ldi	r26, 0x38	; 56
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e8 e3       	ldi	r30, 0x38	; 56
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 2e       	mov	r0, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_vid_SetPinConf+0x1ec>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_vid_SetPinConf+0x1e8>
     d64:	80 95       	com	r24
     d66:	84 23       	and	r24, r20
     d68:	8c 93       	st	X, r24
     d6a:	41 c0       	rjmp	.+130    	; 0xdee <DIO_vid_SetPinConf+0x27a>
			//PORTC=PORTC & ~(1<<loc_u8_PinNo);
			break;}
		case Port_D:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	a1 f4       	brne	.+40     	; 0xd9a <DIO_vid_SetPinConf+0x226>
				SET_BIT(DDRD,loc_u8_PinNo)
     d72:	a1 e3       	ldi	r26, 0x31	; 49
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e1 e3       	ldi	r30, 0x31	; 49
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_vid_SetPinConf+0x21c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_vid_SetPinConf+0x218>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	2a c0       	rjmp	.+84     	; 0xdee <DIO_vid_SetPinConf+0x27a>
			//PORTD=PORTD | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	88 23       	and	r24, r24
     d9e:	39 f5       	brne	.+78     	; 0xdee <DIO_vid_SetPinConf+0x27a>
				{CLEAR_BIT(DDRD,loc_u8_PinNo)
     da0:	a1 e3       	ldi	r26, 0x31	; 49
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e1 e3       	ldi	r30, 0x31	; 49
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_vid_SetPinConf+0x248>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	2a 95       	dec	r18
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_vid_SetPinConf+0x244>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD,loc_u8_PinNo)}
     dc6:	a2 e3       	ldi	r26, 0x32	; 50
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e2 e3       	ldi	r30, 0x32	; 50
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_vid_SetPinConf+0x270>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_vid_SetPinConf+0x26c>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
			//PORTD=PORTD & ~(1<<loc_u8_PinNo);
			break;}
	}
	
}
     dee:	26 96       	adiw	r28, 0x06	; 6
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <DIO_vid_SetPinPullup>:

void DIO_vid_SetPinPullup(u8 copy_u8_PinNo)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <DIO_vid_SetPinPullup+0x6>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <DIO_vid_SetPinPullup+0x8>
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers;
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	87 70       	andi	r24, 0x07	; 7
     e14:	8a 83       	std	Y+2, r24	; 0x02
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	86 95       	lsr	r24
     e1a:	86 95       	lsr	r24
     e1c:	86 95       	lsr	r24
     e1e:	89 83       	std	Y+1, r24	; 0x01
	switch(loc_u8_PortNo)
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3d 83       	std	Y+5, r19	; 0x05
     e28:	2c 83       	std	Y+4, r18	; 0x04
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	91 05       	cpc	r25, r1
     e32:	09 f4       	brne	.+2      	; 0xe36 <DIO_vid_SetPinPullup+0x36>
     e34:	3e c0       	rjmp	.+124    	; 0xeb2 <DIO_vid_SetPinPullup+0xb2>
     e36:	2c 81       	ldd	r18, Y+4	; 0x04
     e38:	3d 81       	ldd	r19, Y+5	; 0x05
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	2c f4       	brge	.+10     	; 0xe4a <DIO_vid_SetPinPullup+0x4a>
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	71 f0       	breq	.+28     	; 0xe64 <DIO_vid_SetPinPullup+0x64>
     e48:	a8 c0       	rjmp	.+336    	; 0xf9a <DIO_vid_SetPinPullup+0x19a>
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	22 30       	cpi	r18, 0x02	; 2
     e50:	31 05       	cpc	r19, r1
     e52:	09 f4       	brne	.+2      	; 0xe56 <DIO_vid_SetPinPullup+0x56>
     e54:	55 c0       	rjmp	.+170    	; 0xf00 <DIO_vid_SetPinPullup+0x100>
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	9d 81       	ldd	r25, Y+5	; 0x05
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <DIO_vid_SetPinPullup+0x62>
     e60:	76 c0       	rjmp	.+236    	; 0xf4e <DIO_vid_SetPinPullup+0x14e>
     e62:	9b c0       	rjmp	.+310    	; 0xf9a <DIO_vid_SetPinPullup+0x19a>
	{
		case Port_A:
		{
			CLEAR_BIT(DDRA,loc_u8_PinNo)
     e64:	aa e3       	ldi	r26, 0x3A	; 58
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e3       	ldi	r30, 0x3A	; 58
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_vid_SetPinPullup+0x80>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	2a 95       	dec	r18
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_vid_SetPinPullup+0x7c>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
			SET_BIT(PORTA,loc_u8_PinNo)
     e8a:	ab e3       	ldi	r26, 0x3B	; 59
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	eb e3       	ldi	r30, 0x3B	; 59
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_vid_SetPinPullup+0xa8>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_vid_SetPinPullup+0xa4>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	74 c0       	rjmp	.+232    	; 0xf9a <DIO_vid_SetPinPullup+0x19a>
			break;}
		case Port_B:
		{
			SET_BIT(PORTB,loc_u8_PinNo)
     eb2:	a8 e3       	ldi	r26, 0x38	; 56
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e8 e3       	ldi	r30, 0x38	; 56
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_vid_SetPinPullup+0xce>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	2a 95       	dec	r18
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_vid_SetPinPullup+0xca>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,loc_u8_PinNo)
     ed6:	a7 e3       	ldi	r26, 0x37	; 55
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e7 e3       	ldi	r30, 0x37	; 55
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_vid_SetPinPullup+0xf4>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_vid_SetPinPullup+0xf0>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	4d c0       	rjmp	.+154    	; 0xf9a <DIO_vid_SetPinPullup+0x19a>
			break;}
		case Port_C:
		{
			SET_BIT(PORTC,loc_u8_PinNo)
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_vid_SetPinPullup+0x11c>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	2a 95       	dec	r18
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_vid_SetPinPullup+0x118>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
			CLEAR_BIT(DDRC,loc_u8_PinNo)	
     f24:	a4 e3       	ldi	r26, 0x34	; 52
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e4 e3       	ldi	r30, 0x34	; 52
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	02 2e       	mov	r0, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_vid_SetPinPullup+0x142>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	0a 94       	dec	r0
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_vid_SetPinPullup+0x13e>
     f46:	80 95       	com	r24
     f48:	84 23       	and	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	26 c0       	rjmp	.+76     	; 0xf9a <DIO_vid_SetPinPullup+0x19a>
			break;}
		case Port_D:
		{
			CLEAR_BIT(DDRD,loc_u8_PinNo)
     f4e:	a1 e3       	ldi	r26, 0x31	; 49
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e1 e3       	ldi	r30, 0x31	; 49
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_vid_SetPinPullup+0x16a>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	2a 95       	dec	r18
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_vid_SetPinPullup+0x166>
     f6e:	80 95       	com	r24
     f70:	84 23       	and	r24, r20
     f72:	8c 93       	st	X, r24
			SET_BIT(PORTD,loc_u8_PinNo)
     f74:	a2 e3       	ldi	r26, 0x32	; 50
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e2 e3       	ldi	r30, 0x32	; 50
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_vid_SetPinPullup+0x192>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_vid_SetPinPullup+0x18e>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24

			break;}
	}
	
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <DIO_u8_GetPinVal>:
	

u8 DIO_u8_GetPinVal(u8 copy_u8_PinNo)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <DIO_u8_GetPinVal+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <DIO_u8_GetPinVal+0x8>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <DIO_u8_GetPinVal+0xa>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers,loc_u8_PinVal;
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	87 70       	andi	r24, 0x07	; 7
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	86 95       	lsr	r24
     fc4:	86 95       	lsr	r24
     fc6:	86 95       	lsr	r24
     fc8:	8a 83       	std	Y+2, r24	; 0x02
	switch(loc_u8_PortNo)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3e 83       	std	Y+6, r19	; 0x06
     fd2:	2d 83       	std	Y+5, r18	; 0x05
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	9e 81       	ldd	r25, Y+6	; 0x06
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	91 05       	cpc	r25, r1
     fdc:	39 f1       	breq	.+78     	; 0x102c <DIO_u8_GetPinVal+0x82>
     fde:	2d 81       	ldd	r18, Y+5	; 0x05
     fe0:	3e 81       	ldd	r19, Y+6	; 0x06
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	2c f4       	brge	.+10     	; 0xff2 <DIO_u8_GetPinVal+0x48>
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	61 f0       	breq	.+24     	; 0x1008 <DIO_u8_GetPinVal+0x5e>
     ff0:	52 c0       	rjmp	.+164    	; 0x1096 <DIO_u8_GetPinVal+0xec>
     ff2:	2d 81       	ldd	r18, Y+5	; 0x05
     ff4:	3e 81       	ldd	r19, Y+6	; 0x06
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	51 f1       	breq	.+84     	; 0x1050 <DIO_u8_GetPinVal+0xa6>
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	91 05       	cpc	r25, r1
    1004:	b9 f1       	breq	.+110    	; 0x1074 <DIO_u8_GetPinVal+0xca>
    1006:	47 c0       	rjmp	.+142    	; 0x1096 <DIO_u8_GetPinVal+0xec>
	{
		case Port_A:
		{
				GET_BIT(loc_u8_PinVal,PINA,loc_u8_PinNo)
    1008:	e9 e3       	ldi	r30, 0x39	; 57
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8_GetPinVal+0x78>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8_GetPinVal+0x74>
    1026:	84 23       	and	r24, r20
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	35 c0       	rjmp	.+106    	; 0x1096 <DIO_u8_GetPinVal+0xec>
				//loc_u8_PinVal=PINA & 1<<loc_u8_PinNo;
			
			break;}
		case Port_B:
		{
			GET_BIT(loc_u8_PinVal,PINB,loc_u8_PinNo)
    102c:	e6 e3       	ldi	r30, 0x36	; 54
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_u8_GetPinVal+0x9c>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_u8_GetPinVal+0x98>
    104a:	84 23       	and	r24, r20
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	23 c0       	rjmp	.+70     	; 0x1096 <DIO_u8_GetPinVal+0xec>
			//loc_u8_PinVal=PINB & 1<<loc_u8_PinNo;
			break;}
		case Port_C:
		{
			GET_BIT(loc_u8_PinVal,PINC,loc_u8_PinNo)
    1050:	e3 e3       	ldi	r30, 0x33	; 51
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8_GetPinVal+0xc0>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8_GetPinVal+0xbc>
    106e:	84 23       	and	r24, r20
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	11 c0       	rjmp	.+34     	; 0x1096 <DIO_u8_GetPinVal+0xec>
			//loc_u8_PinVal=PINC & 1<<loc_u8_PinNo;
			break;}
		case Port_D:
		{
			GET_BIT(loc_u8_PinVal,PIND,loc_u8_PinNo)
    1074:	e0 e3       	ldi	r30, 0x30	; 48
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_u8_GetPinVal+0xe4>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_u8_GetPinVal+0xe0>
    1092:	84 23       	and	r24, r20
    1094:	89 83       	std	Y+1, r24	; 0x01
			//loc_u8_PinVal=PIND & 1<<loc_u8_PinNo;
			break;}
	}
	return loc_u8_PinVal;   ///To return 1 or 0
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	26 96       	adiw	r28, 0x06	; 6
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DIO_vid_SetPortVal>:


void DIO_vid_SetPortVal(u8 copy_u8_PortNo,u8 copy_u8_PortVal)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_vid_SetPortVal+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_vid_SetPortVal+0x8>
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8_PortNo)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3c 83       	std	Y+4, r19	; 0x04
    10c2:	2b 83       	std	Y+3, r18	; 0x03
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <DIO_vid_SetPortVal+0x58>
    10ce:	2b 81       	ldd	r18, Y+3	; 0x03
    10d0:	3c 81       	ldd	r19, Y+4	; 0x04
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <DIO_vid_SetPortVal+0x38>
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	61 f0       	breq	.+24     	; 0x10f8 <DIO_vid_SetPortVal+0x4e>
    10e0:	1e c0       	rjmp	.+60     	; 0x111e <DIO_vid_SetPortVal+0x74>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	81 f0       	breq	.+32     	; 0x110c <DIO_vid_SetPortVal+0x62>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	91 05       	cpc	r25, r1
    10f4:	81 f0       	breq	.+32     	; 0x1116 <DIO_vid_SetPortVal+0x6c>
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <DIO_vid_SetPortVal+0x74>
	{
		case Port_A:
		{

				PORTA=copy_u8_PortVal;
    10f8:	eb e3       	ldi	r30, 0x3B	; 59
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	80 83       	st	Z, r24
    1100:	0e c0       	rjmp	.+28     	; 0x111e <DIO_vid_SetPortVal+0x74>

			break;}
		case Port_B:
		{
			PORTB=copy_u8_PortVal;
    1102:	e8 e3       	ldi	r30, 0x38	; 56
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	80 83       	st	Z, r24
    110a:	09 c0       	rjmp	.+18     	; 0x111e <DIO_vid_SetPortVal+0x74>
			break;}
		case Port_C:
		{
			PORTC=copy_u8_PortVal;
    110c:	e5 e3       	ldi	r30, 0x35	; 53
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	04 c0       	rjmp	.+8      	; 0x111e <DIO_vid_SetPortVal+0x74>
			break;}
		case Port_D:
		{
			PORTD=copy_u8_PortVal;;
    1116:	e2 e3       	ldi	r30, 0x32	; 50
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
			break;}
	}
	
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <DIO_vid_ClearPortVal>:

void DIO_vid_ClearPortVal(u8 copy_u8_PortNo,u8 copy_u8_PortVal)
{DIO_vid_SetPortVal(copy_u8_PortNo,DIO_u8_LOW);}
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_vid_ClearPortVal+0x6>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_vid_SetPortVal>
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <DIO_u8_GetPortVal>:

u8 DIO_u8_GetPortVal(u8 copy_u8_PortNo)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DIO_u8_GetPortVal+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <DIO_u8_GetPortVal+0x8>
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8_PortNo)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3c 83       	std	Y+4, r19	; 0x04
    1162:	2b 83       	std	Y+3, r18	; 0x03
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	d1 f0       	breq	.+52     	; 0x11a2 <DIO_u8_GetPortVal+0x56>
    116e:	2b 81       	ldd	r18, Y+3	; 0x03
    1170:	3c 81       	ldd	r19, Y+4	; 0x04
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <DIO_u8_GetPortVal+0x36>
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 f0       	breq	.+24     	; 0x1198 <DIO_u8_GetPortVal+0x4c>
    1180:	1f c0       	rjmp	.+62     	; 0x11c0 <DIO_u8_GetPortVal+0x74>
    1182:	2b 81       	ldd	r18, Y+3	; 0x03
    1184:	3c 81       	ldd	r19, Y+4	; 0x04
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	81 f0       	breq	.+32     	; 0x11ac <DIO_u8_GetPortVal+0x60>
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	81 f0       	breq	.+32     	; 0x11b6 <DIO_u8_GetPortVal+0x6a>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <DIO_u8_GetPortVal+0x74>
	{
		case Port_A:
		{
			return PORTA;
    1198:	eb e3       	ldi	r30, 0x3B	; 59
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	90 81       	ld	r25, Z
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	10 c0       	rjmp	.+32     	; 0x11c2 <DIO_u8_GetPortVal+0x76>
		}
		case Port_B:
		{
			return PORTB;
    11a2:	e8 e3       	ldi	r30, 0x38	; 56
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	20 81       	ld	r18, Z
    11a8:	2a 83       	std	Y+2, r18	; 0x02
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <DIO_u8_GetPortVal+0x76>
		}
		case Port_C:
		{
			return PORTC;
    11ac:	e5 e3       	ldi	r30, 0x35	; 53
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	30 81       	ld	r19, Z
    11b2:	3a 83       	std	Y+2, r19	; 0x02
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <DIO_u8_GetPortVal+0x76>
		}
		case Port_D:
		{
			return PORTD;
    11b6:	e2 e3       	ldi	r30, 0x32	; 50
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <DIO_u8_GetPortVal+0x76>
		}

	}
	return 0;
    11c0:	1a 82       	std	Y+2, r1	; 0x02
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <main>:




int main(void)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <main+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	DIO_vid_Init();
    11de:	0e 94 99 04 	call	0x932	; 0x932 <DIO_vid_Init>

	TIMER0_vid_Init();
    11e2:	0e 94 21 03 	call	0x642	; 0x642 <TIMER0_vid_Init>
	TIMER2_vid_Init();
    11e6:	0e 94 cf 03 	call	0x79e	; 0x79e <TIMER2_vid_Init>
	USART_vid_INTIAL(9600);
    11ea:	60 e8       	ldi	r22, 0x80	; 128
    11ec:	75 e2       	ldi	r23, 0x25	; 37
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_vid_INTIAL>
	GIE_vid_INTERENABLE();
    11f6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <GIE_vid_INTERENABLE>
	///////////MOTOR && SERVO INTIAL &&led && buzzer
	TIMER2_vid_SetCompareReg(0);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	0e 94 37 04 	call	0x86e	; 0x86e <TIMER2_vid_SetCompareReg>
	TIMER0_vid_SetCompareReg(41);
    1200:	89 e2       	ldi	r24, 0x29	; 41
    1202:	0e 94 89 03 	call	0x712	; 0x712 <TIMER0_vid_SetCompareReg>
	DIO_vid_SetPinVal(18,0);
    1206:	82 e1       	ldi	r24, 0x12	; 18
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
	DIO_vid_SetPinVal(16,0);
    120e:	80 e1       	ldi	r24, 0x10	; 16
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
	u8 mass=0;
    1216:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{

		USART_u8_ReadChar(&mass);
    1218:	ce 01       	movw	r24, r28
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	0e 94 8e 01 	call	0x31c	; 0x31c <USART_u8_ReadChar>

		switch(mass)
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3b 83       	std	Y+3, r19	; 0x03
    1228:	2a 83       	std	Y+2, r18	; 0x02
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	9b 81       	ldd	r25, Y+3	; 0x03
    122e:	86 38       	cpi	r24, 0x86	; 134
    1230:	91 05       	cpc	r25, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <main+0x64>
    1234:	63 c0       	rjmp	.+198    	; 0x12fc <main+0x12a>
    1236:	2a 81       	ldd	r18, Y+2	; 0x02
    1238:	3b 81       	ldd	r19, Y+3	; 0x03
    123a:	27 38       	cpi	r18, 0x87	; 135
    123c:	31 05       	cpc	r19, r1
    123e:	14 f5       	brge	.+68     	; 0x1284 <main+0xb2>
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	9b 81       	ldd	r25, Y+3	; 0x03
    1244:	83 38       	cpi	r24, 0x83	; 131
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <main+0x7a>
    124a:	4c c0       	rjmp	.+152    	; 0x12e4 <main+0x112>
    124c:	2a 81       	ldd	r18, Y+2	; 0x02
    124e:	3b 81       	ldd	r19, Y+3	; 0x03
    1250:	24 38       	cpi	r18, 0x84	; 132
    1252:	31 05       	cpc	r19, r1
    1254:	64 f4       	brge	.+24     	; 0x126e <main+0x9c>
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	9b 81       	ldd	r25, Y+3	; 0x03
    125a:	81 38       	cpi	r24, 0x81	; 129
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <main+0x90>
    1260:	39 c0       	rjmp	.+114    	; 0x12d4 <main+0x102>
    1262:	2a 81       	ldd	r18, Y+2	; 0x02
    1264:	3b 81       	ldd	r19, Y+3	; 0x03
    1266:	22 38       	cpi	r18, 0x82	; 130
    1268:	31 05       	cpc	r19, r1
    126a:	c1 f1       	breq	.+112    	; 0x12dc <main+0x10a>
    126c:	88 c0       	rjmp	.+272    	; 0x137e <main+0x1ac>
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	84 38       	cpi	r24, 0x84	; 132
    1274:	91 05       	cpc	r25, r1
    1276:	d1 f1       	breq	.+116    	; 0x12ec <main+0x11a>
    1278:	2a 81       	ldd	r18, Y+2	; 0x02
    127a:	3b 81       	ldd	r19, Y+3	; 0x03
    127c:	25 38       	cpi	r18, 0x85	; 133
    127e:	31 05       	cpc	r19, r1
    1280:	c9 f1       	breq	.+114    	; 0x12f4 <main+0x122>
    1282:	7d c0       	rjmp	.+250    	; 0x137e <main+0x1ac>
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	9b 81       	ldd	r25, Y+3	; 0x03
    1288:	89 38       	cpi	r24, 0x89	; 137
    128a:	91 05       	cpc	r25, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <main+0xbe>
    128e:	4a c0       	rjmp	.+148    	; 0x1324 <main+0x152>
    1290:	2a 81       	ldd	r18, Y+2	; 0x02
    1292:	3b 81       	ldd	r19, Y+3	; 0x03
    1294:	2a 38       	cpi	r18, 0x8A	; 138
    1296:	31 05       	cpc	r19, r1
    1298:	5c f4       	brge	.+22     	; 0x12b0 <main+0xde>
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	87 38       	cpi	r24, 0x87	; 135
    12a0:	91 05       	cpc	r25, r1
    12a2:	a1 f1       	breq	.+104    	; 0x130c <main+0x13a>
    12a4:	2a 81       	ldd	r18, Y+2	; 0x02
    12a6:	3b 81       	ldd	r19, Y+3	; 0x03
    12a8:	28 38       	cpi	r18, 0x88	; 136
    12aa:	31 05       	cpc	r19, r1
    12ac:	b9 f1       	breq	.+110    	; 0x131c <main+0x14a>
    12ae:	67 c0       	rjmp	.+206    	; 0x137e <main+0x1ac>
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	81 39       	cpi	r24, 0x91	; 145
    12b6:	91 05       	cpc	r25, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <main+0xea>
    12ba:	44 c0       	rjmp	.+136    	; 0x1344 <main+0x172>
    12bc:	2a 81       	ldd	r18, Y+2	; 0x02
    12be:	3b 81       	ldd	r19, Y+3	; 0x03
    12c0:	22 39       	cpi	r18, 0x92	; 146
    12c2:	31 05       	cpc	r19, r1
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <main+0xf6>
    12c6:	4d c0       	rjmp	.+154    	; 0x1362 <main+0x190>
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	80 39       	cpi	r24, 0x90	; 144
    12ce:	91 05       	cpc	r25, r1
    12d0:	89 f1       	breq	.+98     	; 0x1334 <main+0x162>
    12d2:	55 c0       	rjmp	.+170    	; 0x137e <main+0x1ac>
				{
				case 0x81:
					TIMER0_vid_SetCompareReg(2);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	0e 94 89 03 	call	0x712	; 0x712 <TIMER0_vid_SetCompareReg>
    12da:	51 c0       	rjmp	.+162    	; 0x137e <main+0x1ac>
					break;

				case  0x82:
					TIMER0_vid_SetCompareReg(22);
    12dc:	86 e1       	ldi	r24, 0x16	; 22
    12de:	0e 94 89 03 	call	0x712	; 0x712 <TIMER0_vid_SetCompareReg>
    12e2:	4d c0       	rjmp	.+154    	; 0x137e <main+0x1ac>
					break;

				case  0x83:
					TIMER0_vid_SetCompareReg(41);
    12e4:	89 e2       	ldi	r24, 0x29	; 41
    12e6:	0e 94 89 03 	call	0x712	; 0x712 <TIMER0_vid_SetCompareReg>
    12ea:	49 c0       	rjmp	.+146    	; 0x137e <main+0x1ac>
					break;

				case  0x84:
					TIMER0_vid_SetCompareReg(59);
    12ec:	8b e3       	ldi	r24, 0x3B	; 59
    12ee:	0e 94 89 03 	call	0x712	; 0x712 <TIMER0_vid_SetCompareReg>
    12f2:	45 c0       	rjmp	.+138    	; 0x137e <main+0x1ac>
					break;

				case  0x85:
					TIMER0_vid_SetCompareReg(120);
    12f4:	88 e7       	ldi	r24, 0x78	; 120
    12f6:	0e 94 89 03 	call	0x712	; 0x712 <TIMER0_vid_SetCompareReg>
    12fa:	41 c0       	rjmp	.+130    	; 0x137e <main+0x1ac>
					break;

				case 0x86:
					TIMER2_vid_SetCompareReg(254);
    12fc:	8e ef       	ldi	r24, 0xFE	; 254
    12fe:	0e 94 37 04 	call	0x86e	; 0x86e <TIMER2_vid_SetCompareReg>
					DIO_vid_SetPinVal(17,0);
    1302:	81 e1       	ldi	r24, 0x11	; 17
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
    130a:	39 c0       	rjmp	.+114    	; 0x137e <main+0x1ac>
					break;

				case 0x87:
					TIMER2_vid_SetCompareReg(100);
    130c:	84 e6       	ldi	r24, 0x64	; 100
    130e:	0e 94 37 04 	call	0x86e	; 0x86e <TIMER2_vid_SetCompareReg>
					DIO_vid_SetPinVal(17,0);
    1312:	81 e1       	ldi	r24, 0x11	; 17
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
    131a:	31 c0       	rjmp	.+98     	; 0x137e <main+0x1ac>
					break;

				case 0x88:
					TIMER2_vid_SetCompareReg(0);
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 37 04 	call	0x86e	; 0x86e <TIMER2_vid_SetCompareReg>
    1322:	2d c0       	rjmp	.+90     	; 0x137e <main+0x1ac>
					break;

				case 0x89:
					TIMER2_vid_SetCompareReg(100);
    1324:	84 e6       	ldi	r24, 0x64	; 100
    1326:	0e 94 37 04 	call	0x86e	; 0x86e <TIMER2_vid_SetCompareReg>
					DIO_vid_SetPinVal(17,1);
    132a:	81 e1       	ldi	r24, 0x11	; 17
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
    1332:	25 c0       	rjmp	.+74     	; 0x137e <main+0x1ac>
					break;

				case 0x90:
					TIMER2_vid_SetCompareReg(254);
    1334:	8e ef       	ldi	r24, 0xFE	; 254
    1336:	0e 94 37 04 	call	0x86e	; 0x86e <TIMER2_vid_SetCompareReg>
					DIO_vid_SetPinVal(17,1);
    133a:	81 e1       	ldi	r24, 0x11	; 17
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
    1342:	1d c0       	rjmp	.+58     	; 0x137e <main+0x1ac>
					break;

				case 0x91:
					if(DIO_u8_GetPinVal(16)==0)
    1344:	80 e1       	ldi	r24, 0x10	; 16
    1346:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_u8_GetPinVal>
    134a:	88 23       	and	r24, r24
    134c:	29 f4       	brne	.+10     	; 0x1358 <main+0x186>
						DIO_vid_SetPinVal(16,1);
    134e:	80 e1       	ldi	r24, 0x10	; 16
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
    1356:	13 c0       	rjmp	.+38     	; 0x137e <main+0x1ac>
					else
						DIO_vid_SetPinVal(16,0);
    1358:	80 e1       	ldi	r24, 0x10	; 16
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
    1360:	0e c0       	rjmp	.+28     	; 0x137e <main+0x1ac>
					break;

				case 0x92:
					if(DIO_u8_GetPinVal(18)==0)
    1362:	82 e1       	ldi	r24, 0x12	; 18
    1364:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_u8_GetPinVal>
    1368:	88 23       	and	r24, r24
    136a:	29 f4       	brne	.+10     	; 0x1376 <main+0x1a4>
						DIO_vid_SetPinVal(18,1);
    136c:	82 e1       	ldi	r24, 0x12	; 18
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
    1374:	04 c0       	rjmp	.+8      	; 0x137e <main+0x1ac>
					else
						DIO_vid_SetPinVal(18,0);
    1376:	82 e1       	ldi	r24, 0x12	; 18
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	0e 94 b0 04 	call	0x960	; 0x960 <DIO_vid_SetPinVal>
					break;
				}
		mass=0;
    137e:	19 82       	std	Y+1, r1	; 0x01
    1380:	4b cf       	rjmp	.-362    	; 0x1218 <main+0x46>

00001382 <__udivmodsi4>:
    1382:	a1 e2       	ldi	r26, 0x21	; 33
    1384:	1a 2e       	mov	r1, r26
    1386:	aa 1b       	sub	r26, r26
    1388:	bb 1b       	sub	r27, r27
    138a:	fd 01       	movw	r30, r26
    138c:	0d c0       	rjmp	.+26     	; 0x13a8 <__udivmodsi4_ep>

0000138e <__udivmodsi4_loop>:
    138e:	aa 1f       	adc	r26, r26
    1390:	bb 1f       	adc	r27, r27
    1392:	ee 1f       	adc	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	a2 17       	cp	r26, r18
    1398:	b3 07       	cpc	r27, r19
    139a:	e4 07       	cpc	r30, r20
    139c:	f5 07       	cpc	r31, r21
    139e:	20 f0       	brcs	.+8      	; 0x13a8 <__udivmodsi4_ep>
    13a0:	a2 1b       	sub	r26, r18
    13a2:	b3 0b       	sbc	r27, r19
    13a4:	e4 0b       	sbc	r30, r20
    13a6:	f5 0b       	sbc	r31, r21

000013a8 <__udivmodsi4_ep>:
    13a8:	66 1f       	adc	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	1a 94       	dec	r1
    13b2:	69 f7       	brne	.-38     	; 0x138e <__udivmodsi4_loop>
    13b4:	60 95       	com	r22
    13b6:	70 95       	com	r23
    13b8:	80 95       	com	r24
    13ba:	90 95       	com	r25
    13bc:	9b 01       	movw	r18, r22
    13be:	ac 01       	movw	r20, r24
    13c0:	bd 01       	movw	r22, r26
    13c2:	cf 01       	movw	r24, r30
    13c4:	08 95       	ret

000013c6 <_exit>:
    13c6:	f8 94       	cli

000013c8 <__stop_program>:
    13c8:	ff cf       	rjmp	.-2      	; 0x13c8 <__stop_program>
