
SEND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000024b4  00002548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800178  00800178  00002660  2**0
                  ALLOC
  3 .stab         00002088  00000000  00000000  00002660  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c5  00000000  00000000  000046e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000057ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000594d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a95e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b2cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_1>
       8:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_2>
       c:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 44 07 	jmp	0xe88	; 0xe88 <__vector_14>
      3c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_15>
      40:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 11 	call	0x2246	; 0x2246 <main>
      8a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 45 12 	jmp	0x248a	; 0x248a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 45 12 	jmp	0x248a	; 0x248a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_13>:
void __vector_13(void) __attribute__((signal,used));
void __vector_14(void) __attribute__((signal,used));
void __vector_15(void) __attribute__((signal,used));

void __vector_13(void)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	USART_CallBack_ISR_COMP_RX();
     e58:	e0 91 7a 01 	lds	r30, 0x017A
     e5c:	f0 91 7b 01 	lds	r31, 0x017B
     e60:	09 95       	icall
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	ff 91       	pop	r31
     e68:	ef 91       	pop	r30
     e6a:	bf 91       	pop	r27
     e6c:	af 91       	pop	r26
     e6e:	9f 91       	pop	r25
     e70:	8f 91       	pop	r24
     e72:	7f 91       	pop	r23
     e74:	6f 91       	pop	r22
     e76:	5f 91       	pop	r21
     e78:	4f 91       	pop	r20
     e7a:	3f 91       	pop	r19
     e7c:	2f 91       	pop	r18
     e7e:	0f 90       	pop	r0
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	0f 90       	pop	r0
     e84:	1f 90       	pop	r1
     e86:	18 95       	reti

00000e88 <__vector_14>:
void __vector_14(void)
{
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	USART_CallBack_DATA_EMBTY();
     eb2:	e0 91 78 01 	lds	r30, 0x0178
     eb6:	f0 91 79 01 	lds	r31, 0x0179
     eba:	09 95       	icall
}
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_15>:
void __vector_15(void)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	USART_CallBack_COMP_TX();
     f0c:	e0 91 7c 01 	lds	r30, 0x017C
     f10:	f0 91 7d 01 	lds	r31, 0x017D
     f14:	09 95       	icall
}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	ff 91       	pop	r31
     f1c:	ef 91       	pop	r30
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <USART_vid_INTIAL>:

void USART_vid_INTIAL   (long BaudRate)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <USART_vid_INTIAL+0x6>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <USART_vid_INTIAL+0x8>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <USART_vid_INTIAL+0xa>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	6b 83       	std	Y+3, r22	; 0x03
     f4c:	7c 83       	std	Y+4, r23	; 0x04
     f4e:	8d 83       	std	Y+5, r24	; 0x05
     f50:	9e 83       	std	Y+6, r25	; 0x06
	/////////////////ENABLE RX&&TX
	SET_BIT(UCSRB,RXEN)
     f52:	aa e2       	ldi	r26, 0x2A	; 42
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ea e2       	ldi	r30, 0x2A	; 42
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 61       	ori	r24, 0x10	; 16
     f5e:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN)
     f60:	aa e2       	ldi	r26, 0x2A	; 42
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ea e2       	ldi	r30, 0x2A	; 42
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	8c 93       	st	X, r24
	SET_BIT(UCSRC,URSEL)
     f6e:	a0 e4       	ldi	r26, 0x40	; 64
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e0 e4       	ldi	r30, 0x40	; 64
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	8c 93       	st	X, r24
	#elif USART_u8_FRAME_SIZE_SELECT==USART_u8_7_BIT
	CLEAR_BIT(UCSRC,UCSZ0)
	SET_BIT(UCSRC,UCSZ1)
	CLEAR_BIT(UCSRB,UCSZ2)
	#elif USART_u8_FRAME_SIZE_SELECT==USART_u8_8_BIT
	SET_BIT(UCSRC,UCSZ0)
     f7c:	a0 e4       	ldi	r26, 0x40	; 64
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e0 e4       	ldi	r30, 0x40	; 64
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1)
     f8a:	a0 e4       	ldi	r26, 0x40	; 64
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e0 e4       	ldi	r30, 0x40	; 64
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	84 60       	ori	r24, 0x04	; 4
     f96:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2)
     f98:	aa e2       	ldi	r26, 0x2A	; 42
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ea e2       	ldi	r30, 0x2A	; 42
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1)
	SET_BIT(UCSRB,UCSZ2)
	#endif
	////////////////////////USART Mode Select	
	#if USART_u8_MODE_Select==USART_u8_Asyn_Oper
	CLEAR_BIT(UCSRC,UMSEL)
     fa6:	a0 e4       	ldi	r26, 0x40	; 64
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e0 e4       	ldi	r30, 0x40	; 64
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 7b       	andi	r24, 0xBF	; 191
     fb2:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCPOL)
     fb4:	a0 e4       	ldi	r26, 0x40	; 64
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e0 e4       	ldi	r30, 0x40	; 64
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8e 7f       	andi	r24, 0xFE	; 254
     fc0:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCPOL)
	#endif
	#endif
	////////////////////////USART Parity Mode Select	
	#if USART_u8_Parity_MODE_Select==USART_u8_Disabled
	CLEAR_BIT(UCSRC,UPM0)
     fc2:	a0 e4       	ldi	r26, 0x40	; 64
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e0 e4       	ldi	r30, 0x40	; 64
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7e       	andi	r24, 0xEF	; 239
     fce:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM1)
     fd0:	a0 e4       	ldi	r26, 0x40	; 64
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e0 e4       	ldi	r30, 0x40	; 64
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UPM0)
	SET_BIT(UCSRC,UPM1)
	#endif	
	////////////////////////USART  Stop Bit Select
	#if USART_u8_Stop_Bit_Select==USART_u8_1_BIT
	CLEAR_BIT(UCSRC,USBS)
     fde:	a0 e4       	ldi	r26, 0x40	; 64
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e0 e4       	ldi	r30, 0x40	; 64
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	87 7f       	andi	r24, 0xF7	; 247
     fea:	8c 93       	st	X, r24
	#elif USART_u8_Stop_Bit_Select==USART_u8_2_BIT
	SET_BIT(UCSRC,USBS)
	#endif	

	u16 Local_16_BaudRate = (((1000000UL)/(16*BaudRate))-1);
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	ad 81       	ldd	r26, Y+5	; 0x05
     ff2:	be 81       	ldd	r27, Y+6	; 0x06
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	aa 1f       	adc	r26, r26
     ffa:	bb 1f       	adc	r27, r27
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	aa 1f       	adc	r26, r26
    1002:	bb 1f       	adc	r27, r27
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	aa 1f       	adc	r26, r26
    100a:	bb 1f       	adc	r27, r27
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	aa 1f       	adc	r26, r26
    1012:	bb 1f       	adc	r27, r27
    1014:	9c 01       	movw	r18, r24
    1016:	ad 01       	movw	r20, r26
    1018:	80 e4       	ldi	r24, 0x40	; 64
    101a:	92 e4       	ldi	r25, 0x42	; 66
    101c:	af e0       	ldi	r26, 0x0F	; 15
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 ff 11 	call	0x23fe	; 0x23fe <__udivmodsi4>
    1028:	da 01       	movw	r26, r20
    102a:	c9 01       	movw	r24, r18
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (unsigned char)(Local_16_BaudRate>>8)&0x0F ;
    1032:	e0 e4       	ldi	r30, 0x40	; 64
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	89 2f       	mov	r24, r25
    103c:	99 27       	eor	r25, r25
    103e:	8f 70       	andi	r24, 0x0F	; 15
    1040:	80 83       	st	Z, r24
	UBRRL =(unsigned char) Local_16_BaudRate&0xFF ;
    1042:	e9 e2       	ldi	r30, 0x29	; 41
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	80 83       	st	Z, r24

}
    104a:	26 96       	adiw	r28, 0x06	; 6
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <USART_vid_SendChar>:




void USART_vid_SendChar(u8 Copy_u8_char)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	0f 92       	push	r0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,UDRE))) ;
    1068:	eb e2       	ldi	r30, 0x2B	; 43
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	80 72       	andi	r24, 0x20	; 32
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	b9 f3       	breq	.-18     	; 0x1068 <USART_vid_SendChar+0xc>

	UDR = Copy_u8_char ;
    107a:	ec e2       	ldi	r30, 0x2C	; 44
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	80 83       	st	Z, r24
}
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <USART_vid_SendString>:

void USART_vid_SendString(u8* Copy_pu8_Str)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <USART_vid_SendString+0x6>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <USART_vid_SendString+0x24>
	while(*Copy_pu8_Str != '\0')
	{
		USART_vid_SendChar(*Copy_pu8_Str) ;
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	80 81       	ld	r24, Z
    10a0:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
		Copy_pu8_Str++ ;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8_char ;
}

void USART_vid_SendString(u8* Copy_pu8_Str)
{
	while(*Copy_pu8_Str != '\0')
    10ae:	e9 81       	ldd	r30, Y+1	; 0x01
    10b0:	fa 81       	ldd	r31, Y+2	; 0x02
    10b2:	80 81       	ld	r24, Z
    10b4:	88 23       	and	r24, r24
    10b6:	89 f7       	brne	.-30     	; 0x109a <USART_vid_SendString+0x10>
	{
		USART_vid_SendChar(*Copy_pu8_Str) ;
		Copy_pu8_Str++ ;
	}
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <USART_u8_ReadChar>:

void USART_u8_ReadChar(u8* Copy_pu8_char)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <USART_u8_ReadChar+0x6>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	9a 83       	std	Y+2, r25	; 0x02
    10ce:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,RXC))) ;
    10d0:	eb e2       	ldi	r30, 0x2B	; 43
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 23       	and	r24, r24
    10d8:	dc f7       	brge	.-10     	; 0x10d0 <USART_u8_ReadChar+0xe>

	*Copy_pu8_char = UDR ;
    10da:	ec e2       	ldi	r30, 0x2C	; 44
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	e9 81       	ldd	r30, Y+1	; 0x01
    10e2:	fa 81       	ldd	r31, Y+2	; 0x02
    10e4:	80 83       	st	Z, r24

}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <USART_vid_SetCallBack>:




void USART_vid_SetCallBack(void (*copy_ptr)(void),u8 Copy_u8_INT_Select)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <USART_vid_SetCallBack+0x6>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8_INT_Select==USART_COMP_RX)
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	88 23       	and	r24, r24
    1106:	39 f4       	brne	.+14     	; 0x1116 <USART_vid_SetCallBack+0x26>
		USART_CallBack_ISR_COMP_RX=copy_ptr;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	9a 81       	ldd	r25, Y+2	; 0x02
    110c:	90 93 7b 01 	sts	0x017B, r25
    1110:	80 93 7a 01 	sts	0x017A, r24
    1114:	13 c0       	rjmp	.+38     	; 0x113c <USART_vid_SetCallBack+0x4c>
	else if(Copy_u8_INT_Select==USART_COMP_TX)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	39 f4       	brne	.+14     	; 0x112a <USART_vid_SetCallBack+0x3a>
		USART_CallBack_COMP_TX=copy_ptr;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	90 93 7d 01 	sts	0x017D, r25
    1124:	80 93 7c 01 	sts	0x017C, r24
    1128:	09 c0       	rjmp	.+18     	; 0x113c <USART_vid_SetCallBack+0x4c>
	else if(Copy_u8_INT_Select==USART_DATA_EMBTY)
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	31 f4       	brne	.+12     	; 0x113c <USART_vid_SetCallBack+0x4c>
		USART_CallBack_DATA_EMBTY=copy_ptr;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	90 93 79 01 	sts	0x0179, r25
    1138:	80 93 78 01 	sts	0x0178, r24
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <USART_vid_Enable_RXInt>:

void USART_vid_Enable_RXInt(void)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(UCSRB,RXCIE) 
    1150:	aa e2       	ldi	r26, 0x2A	; 42
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ea e2       	ldi	r30, 0x2A	; 42
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	80 68       	ori	r24, 0x80	; 128
    115c:	8c 93       	st	X, r24
}
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <USART_vid_Disable_RXInt>:

void USART_vid_Disable_RXInt(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE)
    116c:	aa e2       	ldi	r26, 0x2A	; 42
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ea e2       	ldi	r30, 0x2A	; 42
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8f 77       	andi	r24, 0x7F	; 127
    1178:	8c 93       	st	X, r24
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <USART_vid_Enable_TXInt>:

void USART_vid_Enable_TXInt(void)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(UCSRB,TXCIE) 
    1188:	aa e2       	ldi	r26, 0x2A	; 42
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea e2       	ldi	r30, 0x2A	; 42
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 64       	ori	r24, 0x40	; 64
    1194:	8c 93       	st	X, r24
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <USART_vid_Disable_TXInt>:
void USART_vid_Disable_TXInt(void)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
    11a4:	aa e2       	ldi	r26, 0x2A	; 42
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ea e2       	ldi	r30, 0x2A	; 42
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	8f 7b       	andi	r24, 0xBF	; 191
    11b0:	8c 93       	st	X, r24
}
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <USART_vid_Enable_DataEmptyInt>:

void USART_vid_Enable_DataEmptyInt(void)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(UCSRB,UDRIE)
    11c0:	aa e2       	ldi	r26, 0x2A	; 42
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e2       	ldi	r30, 0x2A	; 42
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	80 62       	ori	r24, 0x20	; 32
    11cc:	8c 93       	st	X, r24
}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <USART_vid_Disable_DataEmptyInt>:

void USART_vid_Disable_DataEmptyInt(void)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,UDRIE)
    11dc:	aa e2       	ldi	r26, 0x2A	; 42
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ea e2       	ldi	r30, 0x2A	; 42
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 7d       	andi	r24, 0xDF	; 223
    11e8:	8c 93       	st	X, r24
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <KEYPAD_vid_Int>:




void KEYPAD_vid_Int(void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
	DIO_vid_SetPinConf(KEYPAD_u8_R0,DIO_u8_OUTPUT);
    11f8:	8c e0       	ldi	r24, 0x0C	; 12
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(KEYPAD_u8_R1,DIO_u8_OUTPUT);
    1200:	8d e0       	ldi	r24, 0x0D	; 13
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(KEYPAD_u8_R2,DIO_u8_OUTPUT);
    1208:	8e e0       	ldi	r24, 0x0E	; 14
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(KEYPAD_u8_R3,DIO_u8_OUTPUT);
    1210:	8f e0       	ldi	r24, 0x0F	; 15
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(KEYPAD_u8_C0,DIO_u8_INPUT);
    1218:	88 e0       	ldi	r24, 0x08	; 8
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(KEYPAD_u8_C1,DIO_u8_INPUT);
    1220:	89 e0       	ldi	r24, 0x09	; 9
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(KEYPAD_u8_C2,DIO_u8_INPUT);
    1228:	8a e0       	ldi	r24, 0x0A	; 10
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(KEYPAD_u8_C3,DIO_u8_INPUT);
    1230:	8b e0       	ldi	r24, 0x0B	; 11
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPortVal(PB,DIO_u8_HIGH);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <DIO_vid_SetPortVal>
	DIO_vid_SetPinPullup(KEYPAD_u8_C0);
    1240:	88 e0       	ldi	r24, 0x08	; 8
    1242:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <DIO_vid_SetPinPullup>
	DIO_vid_SetPinPullup(KEYPAD_u8_C1);
    1246:	89 e0       	ldi	r24, 0x09	; 9
    1248:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <DIO_vid_SetPinPullup>
	DIO_vid_SetPinPullup(KEYPAD_u8_C2);
    124c:	8a e0       	ldi	r24, 0x0A	; 10
    124e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <DIO_vid_SetPinPullup>
	DIO_vid_SetPinPullup(KEYPAD_u8_C3);
    1252:	8b e0       	ldi	r24, 0x0B	; 11
    1254:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <DIO_vid_SetPinPullup>
	DIO_vid_SetPinVal(KEYPAD_u8_R0,DIO_u8_HIGH);
    1258:	8c e0       	ldi	r24, 0x0C	; 12
    125a:	61 e0       	ldi	r22, 0x01	; 1
    125c:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
	DIO_vid_SetPinVal(KEYPAD_u8_R1,DIO_u8_HIGH);
    1260:	8d e0       	ldi	r24, 0x0D	; 13
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
	DIO_vid_SetPinVal(KEYPAD_u8_R2,DIO_u8_HIGH);
    1268:	8e e0       	ldi	r24, 0x0E	; 14
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
	DIO_vid_SetPinVal(KEYPAD_u8_R3,DIO_u8_HIGH);
    1270:	8f e0       	ldi	r24, 0x0F	; 15
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
	
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <KEYPAD_vid_FindKey>:
u8 KEYPAD_vid_FindKey(void)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	62 97       	sbiw	r28, 0x12	; 18
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61

	for(u8 Ro=0;Ro<4;Ro++)
    1292:	19 8a       	std	Y+17, r1	; 0x11
    1294:	a9 c0       	rjmp	.+338    	; 0x13e8 <KEYPAD_vid_FindKey+0x16a>
	{
		DIO_vid_SetPinVal(KEYPAD_u8_R(0+Ro),DIO_u8_LOW);
    1296:	89 89       	ldd	r24, Y+17	; 0x11
    1298:	84 5f       	subi	r24, 0xF4	; 244
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
		for(int Co=0;Co<4;Co++)
    12a0:	18 8a       	std	Y+16, r1	; 0x10
    12a2:	1f 86       	std	Y+15, r1	; 0x0f
    12a4:	93 c0       	rjmp	.+294    	; 0x13cc <KEYPAD_vid_FindKey+0x14e>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 ea       	ldi	r26, 0xA0	; 160
    12ac:	b0 e4       	ldi	r27, 0x40	; 64
    12ae:	8b 87       	std	Y+11, r24	; 0x0b
    12b0:	9c 87       	std	Y+12, r25	; 0x0c
    12b2:	ad 87       	std	Y+13, r26	; 0x0d
    12b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    12bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	4a ef       	ldi	r20, 0xFA	; 250
    12c4:	54 e4       	ldi	r21, 0x44	; 68
    12c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	8f 83       	std	Y+7, r24	; 0x07
    12d0:	98 87       	std	Y+8, r25	; 0x08
    12d2:	a9 87       	std	Y+9, r26	; 0x09
    12d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12d6:	6f 81       	ldd	r22, Y+7	; 0x07
    12d8:	78 85       	ldd	r23, Y+8	; 0x08
    12da:	89 85       	ldd	r24, Y+9	; 0x09
    12dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e8       	ldi	r20, 0x80	; 128
    12e4:	5f e3       	ldi	r21, 0x3F	; 63
    12e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ea:	88 23       	and	r24, r24
    12ec:	2c f4       	brge	.+10     	; 0x12f8 <KEYPAD_vid_FindKey+0x7a>
		__ticks = 1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	8d 83       	std	Y+5, r24	; 0x05
    12f6:	3f c0       	rjmp	.+126    	; 0x1376 <KEYPAD_vid_FindKey+0xf8>
	else if (__tmp > 65535)
    12f8:	6f 81       	ldd	r22, Y+7	; 0x07
    12fa:	78 85       	ldd	r23, Y+8	; 0x08
    12fc:	89 85       	ldd	r24, Y+9	; 0x09
    12fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	3f ef       	ldi	r19, 0xFF	; 255
    1304:	4f e7       	ldi	r20, 0x7F	; 127
    1306:	57 e4       	ldi	r21, 0x47	; 71
    1308:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    130c:	18 16       	cp	r1, r24
    130e:	4c f5       	brge	.+82     	; 0x1362 <KEYPAD_vid_FindKey+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1310:	6b 85       	ldd	r22, Y+11	; 0x0b
    1312:	7c 85       	ldd	r23, Y+12	; 0x0c
    1314:	8d 85       	ldd	r24, Y+13	; 0x0d
    1316:	9e 85       	ldd	r25, Y+14	; 0x0e
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e2       	ldi	r20, 0x20	; 32
    131e:	51 e4       	ldi	r21, 0x41	; 65
    1320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	bc 01       	movw	r22, r24
    132a:	cd 01       	movw	r24, r26
    132c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	0f c0       	rjmp	.+30     	; 0x1358 <KEYPAD_vid_FindKey+0xda>
    133a:	88 ec       	ldi	r24, 0xC8	; 200
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <KEYPAD_vid_FindKey+0xc8>
    134a:	9c 83       	std	Y+4, r25	; 0x04
    134c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	69 f7       	brne	.-38     	; 0x133a <KEYPAD_vid_FindKey+0xbc>
    1360:	14 c0       	rjmp	.+40     	; 0x138a <KEYPAD_vid_FindKey+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	78 85       	ldd	r23, Y+8	; 0x08
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	9e 83       	std	Y+6, r25	; 0x06
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <KEYPAD_vid_FindKey+0x104>
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(5);
			if(DIO_u8_GetPinVal(KEYPAD_u8_C(0+Co))==0)
    138a:	8f 85       	ldd	r24, Y+15	; 0x0f
    138c:	88 5f       	subi	r24, 0xF8	; 248
    138e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_u8_GetPinVal>
    1392:	88 23       	and	r24, r24
    1394:	b1 f4       	brne	.+44     	; 0x13c2 <KEYPAD_vid_FindKey+0x144>
			{
				DIO_vid_SetPinVal(KEYPAD_u8_R(0+Ro),DIO_u8_HIGH);
    1396:	89 89       	ldd	r24, Y+17	; 0x11
    1398:	84 5f       	subi	r24, 0xF4	; 244
    139a:	61 e0       	ldi	r22, 0x01	; 1
    139c:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
				return ( Keypad_Au8_Keys[Ro][Co]);
    13a0:	89 89       	ldd	r24, Y+17	; 0x11
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	2f 85       	ldd	r18, Y+15	; 0x0f
    13a8:	38 89       	ldd	r19, Y+16	; 0x10
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	82 0f       	add	r24, r18
    13b4:	93 1f       	adc	r25, r19
    13b6:	fc 01       	movw	r30, r24
    13b8:	e8 59       	subi	r30, 0x98	; 152
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	80 81       	ld	r24, Z
    13be:	8a 8b       	std	Y+18, r24	; 0x12
    13c0:	18 c0       	rjmp	.+48     	; 0x13f2 <KEYPAD_vid_FindKey+0x174>
{

	for(u8 Ro=0;Ro<4;Ro++)
	{
		DIO_vid_SetPinVal(KEYPAD_u8_R(0+Ro),DIO_u8_LOW);
		for(int Co=0;Co<4;Co++)
    13c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c4:	98 89       	ldd	r25, Y+16	; 0x10
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	98 8b       	std	Y+16, r25	; 0x10
    13ca:	8f 87       	std	Y+15, r24	; 0x0f
    13cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ce:	98 89       	ldd	r25, Y+16	; 0x10
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	91 05       	cpc	r25, r1
    13d4:	0c f4       	brge	.+2      	; 0x13d8 <KEYPAD_vid_FindKey+0x15a>
    13d6:	67 cf       	rjmp	.-306    	; 0x12a6 <KEYPAD_vid_FindKey+0x28>
			else
			{}

		}

		DIO_vid_SetPinVal(KEYPAD_u8_R(0+Ro),DIO_u8_HIGH);
    13d8:	89 89       	ldd	r24, Y+17	; 0x11
    13da:	84 5f       	subi	r24, 0xF4	; 244
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
	
}
u8 KEYPAD_vid_FindKey(void)
{

	for(u8 Ro=0;Ro<4;Ro++)
    13e2:	89 89       	ldd	r24, Y+17	; 0x11
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	89 8b       	std	Y+17, r24	; 0x11
    13e8:	89 89       	ldd	r24, Y+17	; 0x11
    13ea:	84 30       	cpi	r24, 0x04	; 4
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <KEYPAD_vid_FindKey+0x172>
    13ee:	53 cf       	rjmp	.-346    	; 0x1296 <KEYPAD_vid_FindKey+0x18>
		}

		DIO_vid_SetPinVal(KEYPAD_u8_R(0+Ro),DIO_u8_HIGH);

	}
	return 0;
    13f0:	1a 8a       	std	Y+18, r1	; 0x12
    13f2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    13f4:	62 96       	adiw	r28, 0x12	; 18
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <GIE_vid_INTERENABLE>:
#include "GIE_config.h"
#include "GIE_priv.h"


void GIE_vid_INTERENABLE   (void)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SRGE,I_BIT)
    140e:	af e5       	ldi	r26, 0x5F	; 95
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ef e5       	ldi	r30, 0x5F	; 95
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 68       	ori	r24, 0x80	; 128
    141a:	8c 93       	st	X, r24
}
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <GIE_vid_INTERDISABLE>:
void GIE_vid_INTERDISABLE (void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT(SRGE,I_BIT)
    142a:	af e5       	ldi	r26, 0x5F	; 95
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ef e5       	ldi	r30, 0x5F	; 95
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8f 77       	andi	r24, 0x7F	; 127
    1436:	8c 93       	st	X, r24
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <__vector_1>:
void __vector_1(void) __attribute__((signal,used));
void __vector_2(void) __attribute__((signal,used));
void __vector_3(void) __attribute__((signal,used));

void __vector_1(void)
{
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	EXITI_CallBack_INT0();
    1468:	e0 91 80 01 	lds	r30, 0x0180
    146c:	f0 91 81 01 	lds	r31, 0x0181
    1470:	09 95       	icall
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	ff 91       	pop	r31
    1478:	ef 91       	pop	r30
    147a:	bf 91       	pop	r27
    147c:	af 91       	pop	r26
    147e:	9f 91       	pop	r25
    1480:	8f 91       	pop	r24
    1482:	7f 91       	pop	r23
    1484:	6f 91       	pop	r22
    1486:	5f 91       	pop	r21
    1488:	4f 91       	pop	r20
    148a:	3f 91       	pop	r19
    148c:	2f 91       	pop	r18
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_2>:
void __vector_2(void)
{
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	2f 93       	push	r18
    14a4:	3f 93       	push	r19
    14a6:	4f 93       	push	r20
    14a8:	5f 93       	push	r21
    14aa:	6f 93       	push	r22
    14ac:	7f 93       	push	r23
    14ae:	8f 93       	push	r24
    14b0:	9f 93       	push	r25
    14b2:	af 93       	push	r26
    14b4:	bf 93       	push	r27
    14b6:	ef 93       	push	r30
    14b8:	ff 93       	push	r31
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	EXITI_CallBack_INT1();
    14c2:	e0 91 7e 01 	lds	r30, 0x017E
    14c6:	f0 91 7f 01 	lds	r31, 0x017F
    14ca:	09 95       	icall
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	0f 90       	pop	r0
    14ee:	1f 90       	pop	r1
    14f0:	18 95       	reti

000014f2 <__vector_3>:
void __vector_3(void)
{
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
	EXITI_CallBack_INT2();
    151c:	e0 91 82 01 	lds	r30, 0x0182
    1520:	f0 91 83 01 	lds	r31, 0x0183
    1524:	09 95       	icall
}
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	7f 91       	pop	r23
    1538:	6f 91       	pop	r22
    153a:	5f 91       	pop	r21
    153c:	4f 91       	pop	r20
    153e:	3f 91       	pop	r19
    1540:	2f 91       	pop	r18
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <EXITI_vid_INTIAL>:

void EXITI_vid_INTIAL   (void)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	#if EXITI_u8_INT0==EXITI_u8_ENABLE 
		#if EXITI_u8_MODE_INT0==EXITI_u8_Low_LEVEL
		CLEAR_BIT(MCUCR,ISC00)
		CLEAR_BIT(MCUCR,ISC01)
		#elif EXITI_u8_MODE_INT0==EXITI_u8_ALC
		SET_BIT(MCUCR,ISC00)
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC01)
    1562:	a5 e5       	ldi	r26, 0x55	; 85
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e5       	ldi	r30, 0x55	; 85
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8d 7f       	andi	r24, 0xFD	; 253
    156e:	8c 93       	st	X, r24
	#if EXITI_u8_INT1==EXITI_u8_ENABLE 
		#if EXITI_u8_MODE_INT1==EXITI_u8_Low_LEVEL
		CLEAR_BIT(MCUCR,ISC10)
		CLEAR_BIT(MCUCR,ISC11)
		#elif EXITI_u8_MODE_INT1==EXITI_u8_ALC
		SET_BIT(MCUCR,ISC10)
    1570:	a5 e5       	ldi	r26, 0x55	; 85
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e5 e5       	ldi	r30, 0x55	; 85
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	84 60       	ori	r24, 0x04	; 4
    157c:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR,ISC11)
    157e:	a5 e5       	ldi	r26, 0x55	; 85
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e5       	ldi	r30, 0x55	; 85
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	87 7f       	andi	r24, 0xF7	; 247
    158a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11)
		#endif
	#endif
	#if EXITI_u8_INT2==EXITI_u8_ENABLE 
		#if EXITI_u8_MODE_INT2==EXITI_u8_FALLING_EDGE
		CLEAR_BIT(MCUCSR,ISC2)
    158c:	a4 e5       	ldi	r26, 0x54	; 84
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e4 e5       	ldi	r30, 0x54	; 84
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8f 7b       	andi	r24, 0xBF	; 191
    1598:	8c 93       	st	X, r24
		#elif EXITI_u8_MODE_INT2==EXITI_u8_RISING_EDGE
		SET_BIT(MCUCSR,ISC2)
		#endif
	#endif
	///////CLEAR FLAGS
	CLEAR_BIT(GIFR,INTF0)
    159a:	aa e5       	ldi	r26, 0x5A	; 90
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ea e5       	ldi	r30, 0x5A	; 90
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 7b       	andi	r24, 0xBF	; 191
    15a6:	8c 93       	st	X, r24
	CLEAR_BIT(GIFR,INTF1)
    15a8:	aa e5       	ldi	r26, 0x5A	; 90
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea e5       	ldi	r30, 0x5A	; 90
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 77       	andi	r24, 0x7F	; 127
    15b4:	8c 93       	st	X, r24
	CLEAR_BIT(GIFR,INTF2)
    15b6:	aa e5       	ldi	r26, 0x5A	; 90
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ea e5       	ldi	r30, 0x5A	; 90
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 7d       	andi	r24, 0xDF	; 223
    15c2:	8c 93       	st	X, r24
	///////DISABLE INTERRUPT
	EXITI_vid_INT0_DISABLE();
    15c4:	0e 94 41 0b 	call	0x1682	; 0x1682 <EXITI_vid_INT0_DISABLE>
	EXITI_vid_INT1_DISABLE();
    15c8:	0e 94 4f 0b 	call	0x169e	; 0x169e <EXITI_vid_INT1_DISABLE>
	EXITI_vid_INT2_DISABLE();
    15cc:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <EXITI_vid_INT2_DISABLE>
}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <EXITI_vid_SetCallBack>:


void EXITI_vid_SetCallBack(void (*copy_ptr)(void),u8 Copy_u8_INT_Select)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <EXITI_vid_SetCallBack+0x6>
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_u8_INT_Select==EXITI_INT0)
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	88 23       	and	r24, r24
    15ec:	39 f4       	brne	.+14     	; 0x15fc <EXITI_vid_SetCallBack+0x26>
		EXITI_CallBack_INT0=copy_ptr;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	9a 81       	ldd	r25, Y+2	; 0x02
    15f2:	90 93 81 01 	sts	0x0181, r25
    15f6:	80 93 80 01 	sts	0x0180, r24
    15fa:	13 c0       	rjmp	.+38     	; 0x1622 <EXITI_vid_SetCallBack+0x4c>
	else if(Copy_u8_INT_Select==EXITI_INT1)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	39 f4       	brne	.+14     	; 0x1610 <EXITI_vid_SetCallBack+0x3a>
		EXITI_CallBack_INT1=copy_ptr;
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	90 93 7f 01 	sts	0x017F, r25
    160a:	80 93 7e 01 	sts	0x017E, r24
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <EXITI_vid_SetCallBack+0x4c>
	else if(Copy_u8_INT_Select==EXITI_INT2)
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	82 30       	cpi	r24, 0x02	; 2
    1614:	31 f4       	brne	.+12     	; 0x1622 <EXITI_vid_SetCallBack+0x4c>
		EXITI_CallBack_INT2=copy_ptr;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	90 93 83 01 	sts	0x0183, r25
    161e:	80 93 82 01 	sts	0x0182, r24
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <EXITI_vid_INT0_ENABLE>:



void EXITI_vid_INT0_ENABLE   (void)
{SET_BIT(GICR,INT0)}
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	ab e5       	ldi	r26, 0x5B	; 91
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	eb e5       	ldi	r30, 0x5B	; 91
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 64       	ori	r24, 0x40	; 64
    1642:	8c 93       	st	X, r24
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <EXITI_vid_INT1_ENABLE>:
void EXITI_vid_INT1_ENABLE   (void)
{SET_BIT(GICR,INT1)}
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	ab e5       	ldi	r26, 0x5B	; 91
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	eb e5       	ldi	r30, 0x5B	; 91
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 68       	ori	r24, 0x80	; 128
    165e:	8c 93       	st	X, r24
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <EXITI_vid_INT2_ENABLE>:
void EXITI_vid_INT2_ENABLE   (void)
{SET_BIT(GICR,INT2)}
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	ab e5       	ldi	r26, 0x5B	; 91
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	eb e5       	ldi	r30, 0x5B	; 91
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 62       	ori	r24, 0x20	; 32
    167a:	8c 93       	st	X, r24
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <EXITI_vid_INT0_DISABLE>:
void EXITI_vid_INT0_DISABLE   (void)
{CLEAR_BIT(GICR,INT0)}
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	ab e5       	ldi	r26, 0x5B	; 91
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e5       	ldi	r30, 0x5B	; 91
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8f 7b       	andi	r24, 0xBF	; 191
    1696:	8c 93       	st	X, r24
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <EXITI_vid_INT1_DISABLE>:
void EXITI_vid_INT1_DISABLE   (void)
{CLEAR_BIT(GICR,INT1)}
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	ab e5       	ldi	r26, 0x5B	; 91
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e5       	ldi	r30, 0x5B	; 91
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	8c 93       	st	X, r24
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <EXITI_vid_INT2_DISABLE>:
void EXITI_vid_INT2_DISABLE   (void)
{CLEAR_BIT(GICR,INT2)}
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	ab e5       	ldi	r26, 0x5B	; 91
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	eb e5       	ldi	r30, 0x5B	; 91
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8f 7d       	andi	r24, 0xDF	; 223
    16ce:	8c 93       	st	X, r24
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <DIO_vid_Init>:




void DIO_vid_Init(void)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
	DDRA=DIO_u8_PORTA_DIRECTION;
    16de:	ea e3       	ldi	r30, 0x3A	; 58
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	80 83       	st	Z, r24
	DDRB=DIO_u8_PORTB_DIRECTION;
    16e6:	e7 e3       	ldi	r30, 0x37	; 55
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	80 83       	st	Z, r24
	DDRC=DIO_u8_PORTC_DIRECTION;
    16ee:	e4 e3       	ldi	r30, 0x34	; 52
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	80 83       	st	Z, r24
	DDRD=DIO_u8_PORTD_DIRECTION;
    16f6:	e1 e3       	ldi	r30, 0x31	; 49
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8e ef       	ldi	r24, 0xFE	; 254
    16fc:	80 83       	st	Z, r24
	
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <DIO_vid_SetPinVal>:

void DIO_vid_SetPinVal(u8 copy_u8_PinNo,u8 copy_u8_PinVal)
{
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <DIO_vid_SetPinVal+0x6>
    170a:	00 d0       	rcall	.+0      	; 0x170c <DIO_vid_SetPinVal+0x8>
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_vid_SetPinVal+0xa>
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	8b 83       	std	Y+3, r24	; 0x03
    1714:	6c 83       	std	Y+4, r22	; 0x04
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers;
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	87 70       	andi	r24, 0x07	; 7
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	86 95       	lsr	r24
    1720:	86 95       	lsr	r24
    1722:	86 95       	lsr	r24
    1724:	89 83       	std	Y+1, r24	; 0x01
	switch(loc_u8_PortNo)
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	3e 83       	std	Y+6, r19	; 0x06
    172e:	2d 83       	std	Y+5, r18	; 0x05
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <DIO_vid_SetPinVal+0x38>
    173a:	47 c0       	rjmp	.+142    	; 0x17ca <DIO_vid_SetPinVal+0xc6>
    173c:	2d 81       	ldd	r18, Y+5	; 0x05
    173e:	3e 81       	ldd	r19, Y+6	; 0x06
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	2c f4       	brge	.+10     	; 0x1750 <DIO_vid_SetPinVal+0x4c>
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	71 f0       	breq	.+28     	; 0x176a <DIO_vid_SetPinVal+0x66>
    174e:	cb c0       	rjmp	.+406    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
    1750:	2d 81       	ldd	r18, Y+5	; 0x05
    1752:	3e 81       	ldd	r19, Y+6	; 0x06
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <DIO_vid_SetPinVal+0x58>
    175a:	67 c0       	rjmp	.+206    	; 0x182a <DIO_vid_SetPinVal+0x126>
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <DIO_vid_SetPinVal+0x64>
    1766:	91 c0       	rjmp	.+290    	; 0x188a <DIO_vid_SetPinVal+0x186>
    1768:	be c0       	rjmp	.+380    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
	{
		case Port_A:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	a1 f4       	brne	.+40     	; 0x1798 <DIO_vid_SetPinVal+0x94>
				SET_BIT(PORTA,loc_u8_PinNo)
    1770:	ab e3       	ldi	r26, 0x3B	; 59
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <DIO_vid_SetPinVal+0x8a>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <DIO_vid_SetPinVal+0x86>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	a7 c0       	rjmp	.+334    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
				//PORTA=PORTA | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
    1798:	8c 81       	ldd	r24, Y+4	; 0x04
    179a:	88 23       	and	r24, r24
    179c:	09 f0       	breq	.+2      	; 0x17a0 <DIO_vid_SetPinVal+0x9c>
    179e:	a3 c0       	rjmp	.+326    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTA,loc_u8_PinNo)
    17a0:	ab e3       	ldi	r26, 0x3B	; 59
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	eb e3       	ldi	r30, 0x3B	; 59
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_vid_SetPinVal+0xba>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_vid_SetPinVal+0xb6>
    17c2:	80 95       	com	r24
    17c4:	84 23       	and	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	8e c0       	rjmp	.+284    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
			//PORTA=PORTA & ~(1<<loc_u8_PinNo);
			break;}
		case Port_B:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	a1 f4       	brne	.+40     	; 0x17f8 <DIO_vid_SetPinVal+0xf4>
				SET_BIT(PORTB,loc_u8_PinNo)
    17d0:	a8 e3       	ldi	r26, 0x38	; 56
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e8 e3       	ldi	r30, 0x38	; 56
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_vid_SetPinVal+0xea>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_vid_SetPinVal+0xe6>
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	77 c0       	rjmp	.+238    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>

			//PORTB=PORTB | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	88 23       	and	r24, r24
    17fc:	09 f0       	breq	.+2      	; 0x1800 <DIO_vid_SetPinVal+0xfc>
    17fe:	73 c0       	rjmp	.+230    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTB,loc_u8_PinNo)
    1800:	a8 e3       	ldi	r26, 0x38	; 56
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e8 e3       	ldi	r30, 0x38	; 56
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_vid_SetPinVal+0x11a>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_vid_SetPinVal+0x116>
    1822:	80 95       	com	r24
    1824:	84 23       	and	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	5e c0       	rjmp	.+188    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
			//PORTB=PORTB & ~(1<<loc_u8_PinNo);
			break;}
		case Port_C:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	a1 f4       	brne	.+40     	; 0x1858 <DIO_vid_SetPinVal+0x154>
				SET_BIT(PORTC,loc_u8_PinNo)
    1830:	a5 e3       	ldi	r26, 0x35	; 53
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e5 e3       	ldi	r30, 0x35	; 53
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_vid_SetPinVal+0x14a>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_vid_SetPinVal+0x146>
    1852:	84 2b       	or	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	47 c0       	rjmp	.+142    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
			//PORTC=PORTC | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	88 23       	and	r24, r24
    185c:	09 f0       	breq	.+2      	; 0x1860 <DIO_vid_SetPinVal+0x15c>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTC,loc_u8_PinNo)
    1860:	a5 e3       	ldi	r26, 0x35	; 53
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_vid_SetPinVal+0x17a>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_vid_SetPinVal+0x176>
    1882:	80 95       	com	r24
    1884:	84 23       	and	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	2e c0       	rjmp	.+92     	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
			//PORTC=PORTC & ~(1<<loc_u8_PinNo);
			break;}
		case Port_D:
		{
			if(copy_u8_PinVal==DIO_u8_HIGH)
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	a1 f4       	brne	.+40     	; 0x18b8 <DIO_vid_SetPinVal+0x1b4>
				SET_BIT(PORTD,loc_u8_PinNo)
    1890:	a2 e3       	ldi	r26, 0x32	; 50
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e2 e3       	ldi	r30, 0x32	; 50
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <DIO_vid_SetPinVal+0x1aa>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <DIO_vid_SetPinVal+0x1a6>
    18b2:	84 2b       	or	r24, r20
    18b4:	8c 93       	st	X, r24
    18b6:	17 c0       	rjmp	.+46     	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
			//PORTD=PORTD | 1<<loc_u8_PinNo;
			else if(copy_u8_PinVal==DIO_u8_LOW)
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	88 23       	and	r24, r24
    18bc:	a1 f4       	brne	.+40     	; 0x18e6 <DIO_vid_SetPinVal+0x1e2>
				CLEAR_BIT(PORTD,loc_u8_PinNo)
    18be:	a2 e3       	ldi	r26, 0x32	; 50
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e2 e3       	ldi	r30, 0x32	; 50
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_vid_SetPinVal+0x1d8>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_vid_SetPinVal+0x1d4>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
			//PORTD=PORTD & ~(1<<loc_u8_PinNo);
			break;}
	}
	
}
    18e6:	26 96       	adiw	r28, 0x06	; 6
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <DIO_vid_ClearPinVal>:

void DIO_vid_ClearPinVal(u8 copy_u8_PinNo,u8 copy_u8_PinVal)
{DIO_vid_SetPinVal(copy_u8_PinNo,DIO_u8_LOW);}
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <DIO_vid_ClearPinVal+0x6>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	6a 83       	std	Y+2, r22	; 0x02
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_vid_SetPinVal>
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <DIO_vid_SetPinConf>:




void DIO_vid_SetPinConf(u8 copy_u8_PinNo,u8 copy_u8_PinType)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <DIO_vid_SetPinConf+0x6>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <DIO_vid_SetPinConf+0x8>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <DIO_vid_SetPinConf+0xa>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	6c 83       	std	Y+4, r22	; 0x04
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers;
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	87 70       	andi	r24, 0x07	; 7
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	86 95       	lsr	r24
    1934:	86 95       	lsr	r24
    1936:	86 95       	lsr	r24
    1938:	89 83       	std	Y+1, r24	; 0x01
	switch(loc_u8_PortNo)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3e 83       	std	Y+6, r19	; 0x06
    1942:	2d 83       	std	Y+5, r18	; 0x05
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <DIO_vid_SetPinConf+0x38>
    194e:	5a c0       	rjmp	.+180    	; 0x1a04 <DIO_vid_SetPinConf+0xec>
    1950:	2d 81       	ldd	r18, Y+5	; 0x05
    1952:	3e 81       	ldd	r19, Y+6	; 0x06
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <DIO_vid_SetPinConf+0x4c>
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	71 f0       	breq	.+28     	; 0x197e <DIO_vid_SetPinConf+0x66>
    1962:	17 c1       	rjmp	.+558    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
    1964:	2d 81       	ldd	r18, Y+5	; 0x05
    1966:	3e 81       	ldd	r19, Y+6	; 0x06
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <DIO_vid_SetPinConf+0x58>
    196e:	8d c0       	rjmp	.+282    	; 0x1a8a <DIO_vid_SetPinConf+0x172>
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	91 05       	cpc	r25, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <DIO_vid_SetPinConf+0x64>
    197a:	ca c0       	rjmp	.+404    	; 0x1b10 <DIO_vid_SetPinConf+0x1f8>
    197c:	0a c1       	rjmp	.+532    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
	{
		case Port_A:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	a1 f4       	brne	.+40     	; 0x19ac <DIO_vid_SetPinConf+0x94>
				SET_BIT(DDRA,loc_u8_PinNo)
    1984:	aa e3       	ldi	r26, 0x3A	; 58
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ea e3       	ldi	r30, 0x3A	; 58
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_vid_SetPinConf+0x8a>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <DIO_vid_SetPinConf+0x86>
    19a6:	84 2b       	or	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	f3 c0       	rjmp	.+486    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
				//PORTA=PORTA | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	88 23       	and	r24, r24
    19b0:	09 f0       	breq	.+2      	; 0x19b4 <DIO_vid_SetPinConf+0x9c>
    19b2:	ef c0       	rjmp	.+478    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
			{CLEAR_BIT(DDRA,loc_u8_PinNo)
    19b4:	aa e3       	ldi	r26, 0x3A	; 58
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ea e3       	ldi	r30, 0x3A	; 58
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_vid_SetPinConf+0xb8>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	2a 95       	dec	r18
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_vid_SetPinConf+0xb4>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
			CLEAR_BIT(PORTA,loc_u8_PinNo)}
    19da:	ab e3       	ldi	r26, 0x3B	; 59
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	eb e3       	ldi	r30, 0x3B	; 59
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_vid_SetPinConf+0xe0>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_vid_SetPinConf+0xdc>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	c7 c0       	rjmp	.+398    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
			//PORTA=PORTA & ~(1<<loc_u8_PinNo);
			break;}
		case Port_B:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	a1 f4       	brne	.+40     	; 0x1a32 <DIO_vid_SetPinConf+0x11a>
				SET_BIT(DDRB,loc_u8_PinNo)
    1a0a:	a7 e3       	ldi	r26, 0x37	; 55
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e7 e3       	ldi	r30, 0x37	; 55
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <DIO_vid_SetPinConf+0x110>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <DIO_vid_SetPinConf+0x10c>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	b0 c0       	rjmp	.+352    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>

			//PORTB=PORTB | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	88 23       	and	r24, r24
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <DIO_vid_SetPinConf+0x122>
    1a38:	ac c0       	rjmp	.+344    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
				{CLEAR_BIT(DDRB,loc_u8_PinNo)
    1a3a:	a7 e3       	ldi	r26, 0x37	; 55
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e7 e3       	ldi	r30, 0x37	; 55
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_vid_SetPinConf+0x13e>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	2a 95       	dec	r18
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_vid_SetPinConf+0x13a>
    1a5a:	80 95       	com	r24
    1a5c:	84 23       	and	r24, r20
    1a5e:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,loc_u8_PinNo)}
    1a60:	a8 e3       	ldi	r26, 0x38	; 56
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e8 e3       	ldi	r30, 0x38	; 56
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_vid_SetPinConf+0x166>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_vid_SetPinConf+0x162>
    1a82:	80 95       	com	r24
    1a84:	84 23       	and	r24, r20
    1a86:	8c 93       	st	X, r24
    1a88:	84 c0       	rjmp	.+264    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
			//PORTB=PORTB & ~(1<<loc_u8_PinNo);
			break;}
		case Port_C:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	a1 f4       	brne	.+40     	; 0x1ab8 <DIO_vid_SetPinConf+0x1a0>
				SET_BIT(DDRC,loc_u8_PinNo)
    1a90:	a4 e3       	ldi	r26, 0x34	; 52
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e4 e3       	ldi	r30, 0x34	; 52
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_vid_SetPinConf+0x196>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_vid_SetPinConf+0x192>
    1ab2:	84 2b       	or	r24, r20
    1ab4:	8c 93       	st	X, r24
    1ab6:	6d c0       	rjmp	.+218    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
			//PORTC=PORTC | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	88 23       	and	r24, r24
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <DIO_vid_SetPinConf+0x1a8>
    1abe:	69 c0       	rjmp	.+210    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
				{CLEAR_BIT(DDRB,loc_u8_PinNo)
    1ac0:	a7 e3       	ldi	r26, 0x37	; 55
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e7 e3       	ldi	r30, 0x37	; 55
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_vid_SetPinConf+0x1c4>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	2a 95       	dec	r18
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_vid_SetPinConf+0x1c0>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB,loc_u8_PinNo)}
    1ae6:	a8 e3       	ldi	r26, 0x38	; 56
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e8 e3       	ldi	r30, 0x38	; 56
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_vid_SetPinConf+0x1ec>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_vid_SetPinConf+0x1e8>
    1b08:	80 95       	com	r24
    1b0a:	84 23       	and	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	41 c0       	rjmp	.+130    	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
			//PORTC=PORTC & ~(1<<loc_u8_PinNo);
			break;}
		case Port_D:
		{
			if(copy_u8_PinType==DIO_u8_OUTPUT)
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	a1 f4       	brne	.+40     	; 0x1b3e <DIO_vid_SetPinConf+0x226>
				SET_BIT(DDRD,loc_u8_PinNo)
    1b16:	a1 e3       	ldi	r26, 0x31	; 49
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e1 e3       	ldi	r30, 0x31	; 49
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <DIO_vid_SetPinConf+0x21c>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <DIO_vid_SetPinConf+0x218>
    1b38:	84 2b       	or	r24, r20
    1b3a:	8c 93       	st	X, r24
    1b3c:	2a c0       	rjmp	.+84     	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
			//PORTD=PORTD | 1<<loc_u8_PinNo;
			else if(copy_u8_PinType==DIO_u8_INPUT)
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	88 23       	and	r24, r24
    1b42:	39 f5       	brne	.+78     	; 0x1b92 <DIO_vid_SetPinConf+0x27a>
				{CLEAR_BIT(DDRD,loc_u8_PinNo)
    1b44:	a1 e3       	ldi	r26, 0x31	; 49
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e1 e3       	ldi	r30, 0x31	; 49
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_vid_SetPinConf+0x248>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	2a 95       	dec	r18
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_vid_SetPinConf+0x244>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD,loc_u8_PinNo)}
    1b6a:	a2 e3       	ldi	r26, 0x32	; 50
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e2 e3       	ldi	r30, 0x32	; 50
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 2e       	mov	r0, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <DIO_vid_SetPinConf+0x270>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <DIO_vid_SetPinConf+0x26c>
    1b8c:	80 95       	com	r24
    1b8e:	84 23       	and	r24, r20
    1b90:	8c 93       	st	X, r24
			//PORTD=PORTD & ~(1<<loc_u8_PinNo);
			break;}
	}
	
}
    1b92:	26 96       	adiw	r28, 0x06	; 6
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <DIO_vid_SetPinPullup>:

void DIO_vid_SetPinPullup(u8 copy_u8_PinNo)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <DIO_vid_SetPinPullup+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <DIO_vid_SetPinPullup+0x8>
    1bac:	0f 92       	push	r0
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers;
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	87 70       	andi	r24, 0x07	; 7
    1bb8:	8a 83       	std	Y+2, r24	; 0x02
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	86 95       	lsr	r24
    1bbe:	86 95       	lsr	r24
    1bc0:	86 95       	lsr	r24
    1bc2:	89 83       	std	Y+1, r24	; 0x01
	switch(loc_u8_PortNo)
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	3d 83       	std	Y+5, r19	; 0x05
    1bcc:	2c 83       	std	Y+4, r18	; 0x04
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <DIO_vid_SetPinPullup+0x36>
    1bd8:	3e c0       	rjmp	.+124    	; 0x1c56 <DIO_vid_SetPinPullup+0xb2>
    1bda:	2c 81       	ldd	r18, Y+4	; 0x04
    1bdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	2c f4       	brge	.+10     	; 0x1bee <DIO_vid_SetPinPullup+0x4a>
    1be4:	8c 81       	ldd	r24, Y+4	; 0x04
    1be6:	9d 81       	ldd	r25, Y+5	; 0x05
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	71 f0       	breq	.+28     	; 0x1c08 <DIO_vid_SetPinPullup+0x64>
    1bec:	a8 c0       	rjmp	.+336    	; 0x1d3e <DIO_vid_SetPinPullup+0x19a>
    1bee:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <DIO_vid_SetPinPullup+0x56>
    1bf8:	55 c0       	rjmp	.+170    	; 0x1ca4 <DIO_vid_SetPinPullup+0x100>
    1bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfe:	83 30       	cpi	r24, 0x03	; 3
    1c00:	91 05       	cpc	r25, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <DIO_vid_SetPinPullup+0x62>
    1c04:	76 c0       	rjmp	.+236    	; 0x1cf2 <DIO_vid_SetPinPullup+0x14e>
    1c06:	9b c0       	rjmp	.+310    	; 0x1d3e <DIO_vid_SetPinPullup+0x19a>
	{
		case Port_A:
		{
			CLEAR_BIT(DDRA,loc_u8_PinNo)
    1c08:	aa e3       	ldi	r26, 0x3A	; 58
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ea e3       	ldi	r30, 0x3A	; 58
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_vid_SetPinPullup+0x80>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	2a 95       	dec	r18
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_vid_SetPinPullup+0x7c>
    1c28:	80 95       	com	r24
    1c2a:	84 23       	and	r24, r20
    1c2c:	8c 93       	st	X, r24
			SET_BIT(PORTA,loc_u8_PinNo)
    1c2e:	ab e3       	ldi	r26, 0x3B	; 59
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	eb e3       	ldi	r30, 0x3B	; 59
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_vid_SetPinPullup+0xa8>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_vid_SetPinPullup+0xa4>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	74 c0       	rjmp	.+232    	; 0x1d3e <DIO_vid_SetPinPullup+0x19a>
			break;}
		case Port_B:
		{
			SET_BIT(PORTB,loc_u8_PinNo)
    1c56:	a8 e3       	ldi	r26, 0x38	; 56
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e8 e3       	ldi	r30, 0x38	; 56
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <DIO_vid_SetPinPullup+0xce>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	2a 95       	dec	r18
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <DIO_vid_SetPinPullup+0xca>
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,loc_u8_PinNo)
    1c7a:	a7 e3       	ldi	r26, 0x37	; 55
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e7 e3       	ldi	r30, 0x37	; 55
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_vid_SetPinPullup+0xf4>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <DIO_vid_SetPinPullup+0xf0>
    1c9c:	80 95       	com	r24
    1c9e:	84 23       	and	r24, r20
    1ca0:	8c 93       	st	X, r24
    1ca2:	4d c0       	rjmp	.+154    	; 0x1d3e <DIO_vid_SetPinPullup+0x19a>
			break;}
		case Port_C:
		{
			SET_BIT(PORTC,loc_u8_PinNo)
    1ca4:	a5 e3       	ldi	r26, 0x35	; 53
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e5 e3       	ldi	r30, 0x35	; 53
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <DIO_vid_SetPinPullup+0x11c>
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	2a 95       	dec	r18
    1cc2:	e2 f7       	brpl	.-8      	; 0x1cbc <DIO_vid_SetPinPullup+0x118>
    1cc4:	84 2b       	or	r24, r20
    1cc6:	8c 93       	st	X, r24
			CLEAR_BIT(DDRC,loc_u8_PinNo)	
    1cc8:	a4 e3       	ldi	r26, 0x34	; 52
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e4 e3       	ldi	r30, 0x34	; 52
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <DIO_vid_SetPinPullup+0x142>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <DIO_vid_SetPinPullup+0x13e>
    1cea:	80 95       	com	r24
    1cec:	84 23       	and	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	26 c0       	rjmp	.+76     	; 0x1d3e <DIO_vid_SetPinPullup+0x19a>
			break;}
		case Port_D:
		{
			CLEAR_BIT(DDRD,loc_u8_PinNo)
    1cf2:	a1 e3       	ldi	r26, 0x31	; 49
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e1 e3       	ldi	r30, 0x31	; 49
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_vid_SetPinPullup+0x16a>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	2a 95       	dec	r18
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_vid_SetPinPullup+0x166>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
			SET_BIT(PORTD,loc_u8_PinNo)
    1d18:	a2 e3       	ldi	r26, 0x32	; 50
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_vid_SetPinPullup+0x192>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_vid_SetPinPullup+0x18e>
    1d3a:	84 2b       	or	r24, r20
    1d3c:	8c 93       	st	X, r24

			break;}
	}
	
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <DIO_u8_GetPinVal>:
	

u8 DIO_u8_GetPinVal(u8 copy_u8_PinNo)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <DIO_u8_GetPinVal+0x6>
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <DIO_u8_GetPinVal+0x8>
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <DIO_u8_GetPinVal+0xa>
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_u8_PinNo=copy_u8_PinNo%Pin_numbers,loc_u8_PortNo=copy_u8_PinNo/Pin_numbers,loc_u8_PinVal;
    1d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d60:	87 70       	andi	r24, 0x07	; 7
    1d62:	8b 83       	std	Y+3, r24	; 0x03
    1d64:	8c 81       	ldd	r24, Y+4	; 0x04
    1d66:	86 95       	lsr	r24
    1d68:	86 95       	lsr	r24
    1d6a:	86 95       	lsr	r24
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
	switch(loc_u8_PortNo)
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3e 83       	std	Y+6, r19	; 0x06
    1d76:	2d 83       	std	Y+5, r18	; 0x05
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	39 f1       	breq	.+78     	; 0x1dd0 <DIO_u8_GetPinVal+0x82>
    1d82:	2d 81       	ldd	r18, Y+5	; 0x05
    1d84:	3e 81       	ldd	r19, Y+6	; 0x06
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <DIO_u8_GetPinVal+0x48>
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	61 f0       	breq	.+24     	; 0x1dac <DIO_u8_GetPinVal+0x5e>
    1d94:	52 c0       	rjmp	.+164    	; 0x1e3a <DIO_u8_GetPinVal+0xec>
    1d96:	2d 81       	ldd	r18, Y+5	; 0x05
    1d98:	3e 81       	ldd	r19, Y+6	; 0x06
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	51 f1       	breq	.+84     	; 0x1df4 <DIO_u8_GetPinVal+0xa6>
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	b9 f1       	breq	.+110    	; 0x1e18 <DIO_u8_GetPinVal+0xca>
    1daa:	47 c0       	rjmp	.+142    	; 0x1e3a <DIO_u8_GetPinVal+0xec>
	{
		case Port_A:
		{
				GET_BIT(loc_u8_PinVal,PINA,loc_u8_PinNo)
    1dac:	e9 e3       	ldi	r30, 0x39	; 57
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_u8_GetPinVal+0x78>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_u8_GetPinVal+0x74>
    1dca:	84 23       	and	r24, r20
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	35 c0       	rjmp	.+106    	; 0x1e3a <DIO_u8_GetPinVal+0xec>
				//loc_u8_PinVal=PINA & 1<<loc_u8_PinNo;
			
			break;}
		case Port_B:
		{
			GET_BIT(loc_u8_PinVal,PINB,loc_u8_PinNo)
    1dd0:	e6 e3       	ldi	r30, 0x36	; 54
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_u8_GetPinVal+0x9c>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_u8_GetPinVal+0x98>
    1dee:	84 23       	and	r24, r20
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	23 c0       	rjmp	.+70     	; 0x1e3a <DIO_u8_GetPinVal+0xec>
			//loc_u8_PinVal=PINB & 1<<loc_u8_PinNo;
			break;}
		case Port_C:
		{
			GET_BIT(loc_u8_PinVal,PINC,loc_u8_PinNo)
    1df4:	e3 e3       	ldi	r30, 0x33	; 51
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <DIO_u8_GetPinVal+0xc0>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <DIO_u8_GetPinVal+0xbc>
    1e12:	84 23       	and	r24, r20
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	11 c0       	rjmp	.+34     	; 0x1e3a <DIO_u8_GetPinVal+0xec>
			//loc_u8_PinVal=PINC & 1<<loc_u8_PinNo;
			break;}
		case Port_D:
		{
			GET_BIT(loc_u8_PinVal,PIND,loc_u8_PinNo)
    1e18:	e0 e3       	ldi	r30, 0x30	; 48
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <DIO_u8_GetPinVal+0xe4>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <DIO_u8_GetPinVal+0xe0>
    1e36:	84 23       	and	r24, r20
    1e38:	89 83       	std	Y+1, r24	; 0x01
			//loc_u8_PinVal=PIND & 1<<loc_u8_PinNo;
			break;}
	}
	return loc_u8_PinVal;   ///To return 1 or 0
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3c:	26 96       	adiw	r28, 0x06	; 6
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <DIO_vid_SetPortVal>:


void DIO_vid_SetPortVal(u8 copy_u8_PortNo,u8 copy_u8_PortVal)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <DIO_vid_SetPortVal+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <DIO_vid_SetPortVal+0x8>
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8_PortNo)
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3c 83       	std	Y+4, r19	; 0x04
    1e66:	2b 83       	std	Y+3, r18	; 0x03
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	91 05       	cpc	r25, r1
    1e70:	d1 f0       	breq	.+52     	; 0x1ea6 <DIO_vid_SetPortVal+0x58>
    1e72:	2b 81       	ldd	r18, Y+3	; 0x03
    1e74:	3c 81       	ldd	r19, Y+4	; 0x04
    1e76:	22 30       	cpi	r18, 0x02	; 2
    1e78:	31 05       	cpc	r19, r1
    1e7a:	2c f4       	brge	.+10     	; 0x1e86 <DIO_vid_SetPortVal+0x38>
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	61 f0       	breq	.+24     	; 0x1e9c <DIO_vid_SetPortVal+0x4e>
    1e84:	1e c0       	rjmp	.+60     	; 0x1ec2 <DIO_vid_SetPortVal+0x74>
    1e86:	2b 81       	ldd	r18, Y+3	; 0x03
    1e88:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	81 f0       	breq	.+32     	; 0x1eb0 <DIO_vid_SetPortVal+0x62>
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	83 30       	cpi	r24, 0x03	; 3
    1e96:	91 05       	cpc	r25, r1
    1e98:	81 f0       	breq	.+32     	; 0x1eba <DIO_vid_SetPortVal+0x6c>
    1e9a:	13 c0       	rjmp	.+38     	; 0x1ec2 <DIO_vid_SetPortVal+0x74>
	{
		case Port_A:
		{

				PORTA=copy_u8_PortVal;
    1e9c:	eb e3       	ldi	r30, 0x3B	; 59
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	80 83       	st	Z, r24
    1ea4:	0e c0       	rjmp	.+28     	; 0x1ec2 <DIO_vid_SetPortVal+0x74>

			break;}
		case Port_B:
		{
			PORTB=copy_u8_PortVal;
    1ea6:	e8 e3       	ldi	r30, 0x38	; 56
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
    1eae:	09 c0       	rjmp	.+18     	; 0x1ec2 <DIO_vid_SetPortVal+0x74>
			break;}
		case Port_C:
		{
			PORTC=copy_u8_PortVal;
    1eb0:	e5 e3       	ldi	r30, 0x35	; 53
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 83       	st	Z, r24
    1eb8:	04 c0       	rjmp	.+8      	; 0x1ec2 <DIO_vid_SetPortVal+0x74>
			break;}
		case Port_D:
		{
			PORTD=copy_u8_PortVal;;
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	80 83       	st	Z, r24
			break;}
	}
	
}
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <DIO_vid_ClearPortVal>:

void DIO_vid_ClearPortVal(u8 copy_u8_PortNo,u8 copy_u8_PortVal)
{DIO_vid_SetPortVal(copy_u8_PortNo,DIO_u8_LOW);}
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <DIO_vid_ClearPortVal+0x6>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	6a 83       	std	Y+2, r22	; 0x02
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <DIO_vid_SetPortVal>
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <DIO_u8_GetPortVal>:

u8 DIO_u8_GetPortVal(u8 copy_u8_PortNo)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <DIO_u8_GetPortVal+0x6>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <DIO_u8_GetPortVal+0x8>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8_PortNo)
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	3c 83       	std	Y+4, r19	; 0x04
    1f06:	2b 83       	std	Y+3, r18	; 0x03
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	91 05       	cpc	r25, r1
    1f10:	d1 f0       	breq	.+52     	; 0x1f46 <DIO_u8_GetPortVal+0x56>
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	3c 81       	ldd	r19, Y+4	; 0x04
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	31 05       	cpc	r19, r1
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <DIO_u8_GetPortVal+0x36>
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	61 f0       	breq	.+24     	; 0x1f3c <DIO_u8_GetPortVal+0x4c>
    1f24:	1f c0       	rjmp	.+62     	; 0x1f64 <DIO_u8_GetPortVal+0x74>
    1f26:	2b 81       	ldd	r18, Y+3	; 0x03
    1f28:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	81 f0       	breq	.+32     	; 0x1f50 <DIO_u8_GetPortVal+0x60>
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	91 05       	cpc	r25, r1
    1f38:	81 f0       	breq	.+32     	; 0x1f5a <DIO_u8_GetPortVal+0x6a>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <DIO_u8_GetPortVal+0x74>
	{
		case Port_A:
		{
			return PORTA;
    1f3c:	eb e3       	ldi	r30, 0x3B	; 59
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	90 81       	ld	r25, Z
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	10 c0       	rjmp	.+32     	; 0x1f66 <DIO_u8_GetPortVal+0x76>
		}
		case Port_B:
		{
			return PORTB;
    1f46:	e8 e3       	ldi	r30, 0x38	; 56
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	20 81       	ld	r18, Z
    1f4c:	2a 83       	std	Y+2, r18	; 0x02
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <DIO_u8_GetPortVal+0x76>
		}
		case Port_C:
		{
			return PORTC;
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	30 81       	ld	r19, Z
    1f56:	3a 83       	std	Y+2, r19	; 0x02
    1f58:	06 c0       	rjmp	.+12     	; 0x1f66 <DIO_u8_GetPortVal+0x76>
		}
		case Port_D:
		{
			return PORTD;
    1f5a:	e2 e3       	ldi	r30, 0x32	; 50
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8a 83       	std	Y+2, r24	; 0x02
    1f62:	01 c0       	rjmp	.+2      	; 0x1f66 <DIO_u8_GetPortVal+0x76>
		}

	}
	return 0;
    1f64:	1a 82       	std	Y+2, r1	; 0x02
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <__vector_16>:

void (* ADC_CallBack)(void);
void __vector_16 (void) __attribute__((signal,used));

void __vector_16 (void)
{
    1f76:	1f 92       	push	r1
    1f78:	0f 92       	push	r0
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	0f 92       	push	r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	2f 93       	push	r18
    1f82:	3f 93       	push	r19
    1f84:	4f 93       	push	r20
    1f86:	5f 93       	push	r21
    1f88:	6f 93       	push	r22
    1f8a:	7f 93       	push	r23
    1f8c:	8f 93       	push	r24
    1f8e:	9f 93       	push	r25
    1f90:	af 93       	push	r26
    1f92:	bf 93       	push	r27
    1f94:	ef 93       	push	r30
    1f96:	ff 93       	push	r31
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
	ADC_CallBack();
    1fa0:	e0 91 86 01 	lds	r30, 0x0186
    1fa4:	f0 91 87 01 	lds	r31, 0x0187
    1fa8:	09 95       	icall
}
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	ff 91       	pop	r31
    1fb0:	ef 91       	pop	r30
    1fb2:	bf 91       	pop	r27
    1fb4:	af 91       	pop	r26
    1fb6:	9f 91       	pop	r25
    1fb8:	8f 91       	pop	r24
    1fba:	7f 91       	pop	r23
    1fbc:	6f 91       	pop	r22
    1fbe:	5f 91       	pop	r21
    1fc0:	4f 91       	pop	r20
    1fc2:	3f 91       	pop	r19
    1fc4:	2f 91       	pop	r18
    1fc6:	0f 90       	pop	r0
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	0f 90       	pop	r0
    1fcc:	1f 90       	pop	r1
    1fce:	18 95       	reti

00001fd0 <ADC_vid_INIT>:
/////////////////////////////////////////////////////////////////////////////////////INITAIL
void ADC_vid_INIT  (void)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
	///////////REF SELECT
	#if ADC_u8_Volt_Ref_Selec==ADC_u8_Active_AREF
	CLEAR_BIT(ADMUX,ADC_u8_REFS0)
	CLEAR_BIT(ADMUX,ADC_u8_REFS1)
	#elif ADC_u8_Volt_Ref_Selec==ADC_u8_Active_VCC
	SET_BIT(ADMUX,ADC_u8_REFS0)
    1fd8:	a7 e2       	ldi	r26, 0x27	; 39
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e7 e2       	ldi	r30, 0x27	; 39
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 64       	ori	r24, 0x40	; 64
    1fe4:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,ADC_u8_REFS1)
    1fe6:	a7 e2       	ldi	r26, 0x27	; 39
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e7 e2       	ldi	r30, 0x27	; 39
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	8f 77       	andi	r24, 0x7F	; 127
    1ff2:	8c 93       	st	X, r24
	#endif
	///////////MODE SELECT
	#if ADC_u8_Mode==ADC_u8_8Bit_Mode        //left adjusted
	CLEAR_BIT(ADMUX,ADC_u8_ADLAR)
	#elif ADC_u8_Mode==ADC_u8_10Bit_Mode		 //right adjusted
	CLEAR_BIT(ADMUX,ADC_u8_ADLAR)
    1ff4:	a7 e2       	ldi	r26, 0x27	; 39
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e7 e2       	ldi	r30, 0x27	; 39
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 7d       	andi	r24, 0xDF	; 223
    2000:	8c 93       	st	X, r24
	#endif
	///////////Prescaler SELECT
	#if ADC_u8_Prescaler_selec==ADC_u8_Prescaler_2
	CLEAR_BIT(ADMUX,ADC_u8_ADPS0)
    2002:	a7 e2       	ldi	r26, 0x27	; 39
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e7 e2       	ldi	r30, 0x27	; 39
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8e 7f       	andi	r24, 0xFE	; 254
    200e:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,ADC_u8_ADPS1)
    2010:	a7 e2       	ldi	r26, 0x27	; 39
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e7 e2       	ldi	r30, 0x27	; 39
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	8d 7f       	andi	r24, 0xFD	; 253
    201c:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,ADC_u8_ADPS2)
    201e:	a7 e2       	ldi	r26, 0x27	; 39
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e7 e2       	ldi	r30, 0x27	; 39
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	8b 7f       	andi	r24, 0xFB	; 251
    202a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADC_u8_ADPS0)
	SET_BIT(ADMUX,ADC_u8_ADPS1)
	SET_BIT(ADMUX,ADC_u8_ADPS2)
	#endif
	//////////////ENABLE ADC
	SET_BIT(ADCSRA,ADC_u8_ADEN)
    202c:	a6 e2       	ldi	r26, 0x26	; 38
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e6 e2       	ldi	r30, 0x26	; 38
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	80 68       	ori	r24, 0x80	; 128
    2038:	8c 93       	st	X, r24
	//////////////DISABL INTERRUPT
	CLEAR_BIT(ADCSRA,ADC_u8_ADIE)
    203a:	a6 e2       	ldi	r26, 0x26	; 38
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e6 e2       	ldi	r30, 0x26	; 38
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	87 7f       	andi	r24, 0xF7	; 247
    2046:	8c 93       	st	X, r24
	//////////////CLEAR INTERRUPT FLAG
	CLEAR_BIT(ADCSRA,ADC_u8_ADIF)
    2048:	a6 e2       	ldi	r26, 0x26	; 38
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e6 e2       	ldi	r30, 0x26	; 38
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8f 7e       	andi	r24, 0xEF	; 239
    2054:	8c 93       	st	X, r24

}
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <ADC_vid_ADC_ENABLE>:
void ADC_vid_ADC_ENABLE   (void)
{SET_BIT(ADCSRA,ADC_u8_ADEN)}
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	a6 e2       	ldi	r26, 0x26	; 38
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e6 e2       	ldi	r30, 0x26	; 38
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	80 68       	ori	r24, 0x80	; 128
    2070:	8c 93       	st	X, r24
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <ADC_vid_ADC_DISABLE>:
void ADC_vid_ADC_DISABLE   (void)
{CLEAR_BIT(ADCSRA,ADC_u8_ADEN)}
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	a6 e2       	ldi	r26, 0x26	; 38
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e6 e2       	ldi	r30, 0x26	; 38
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	8f 77       	andi	r24, 0x7F	; 127
    208c:	8c 93       	st	X, r24
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <ADC_vid_SetCallBack>:
//////////////////////////////////////////////////////////////////////////////INTERRUPT
void ADC_vid_SetCallBack(void (*copy_ptr)(void))
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <ADC_vid_SetCallBack+0x6>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
	ADC_CallBack =copy_ptr ;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	90 93 87 01 	sts	0x0187, r25
    20aa:	80 93 86 01 	sts	0x0186, r24
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <ADC_vid_INT_ENABLE>:
void ADC_vid_INT_ENABLE   (void)
{	SET_BIT(ADCSRA,ADC_u8_ADIE)}
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	a6 e2       	ldi	r26, 0x26	; 38
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e6 e2       	ldi	r30, 0x26	; 38
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	88 60       	ori	r24, 0x08	; 8
    20cc:	8c 93       	st	X, r24
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <ADC_vid_INT_DISABLE>:
void ADC_vid_INT_DISABLE   (void)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADC_u8_ADIE)
    20dc:	a6 e2       	ldi	r26, 0x26	; 38
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e6 e2       	ldi	r30, 0x26	; 38
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	87 7f       	andi	r24, 0xF7	; 247
    20e8:	8c 93       	st	X, r24
}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <ADC_u16_ReadChannel>:
{return (f32)(((f32)ADCH*(f32)ADC_u8_Voltage_Refrence)/(f32)254);}
	
//////////////////////////////////////////////////////////////////////////////10bit mode
#elif ADC_u8_Mode==ADC_u8_10Bit_Mode		 //right adjusted
u16 ADC_u16_ReadChannel(u8 Copy_u8_Channel)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <ADC_u16_ReadChannel+0x6>
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <ADC_u16_ReadChannel+0x8>
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	8d 83       	std	Y+5, r24	; 0x05
	u16 Loc_u16_low,Loc_u16_high;
	CLEAR_BITS(ADMUX,ADC_u8_MUX_BITS)			//clear MUX BITS
    2100:	a7 e2       	ldi	r26, 0x27	; 39
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e7 e2       	ldi	r30, 0x27	; 39
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	80 7e       	andi	r24, 0xE0	; 224
    210c:	8c 93       	st	X, r24
	SET_BITS(ADMUX,Copy_u8_Channel)				// select channel
    210e:	a7 e2       	ldi	r26, 0x27	; 39
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e7 e2       	ldi	r30, 0x27	; 39
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	90 81       	ld	r25, Z
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	89 2b       	or	r24, r25
    211c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADC_u8_ADSC)					//start conversion
    211e:	a6 e2       	ldi	r26, 0x26	; 38
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	e6 e2       	ldi	r30, 0x26	; 38
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	80 64       	ori	r24, 0x40	; 64
    212a:	8c 93       	st	X, r24
	//_delay_ms(20);

	while(GET_BIT(ADCSRA,ADC_u8_ADIF)==0 );
    212c:	e6 e2       	ldi	r30, 0x26	; 38
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	80 71       	andi	r24, 0x10	; 16
    2138:	90 70       	andi	r25, 0x00	; 0
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	b9 f3       	breq	.-18     	; 0x212c <ADC_u16_ReadChannel+0x3c>
	SET_BIT(ADCSRA,ADC_u8_ADIF)
    213e:	a6 e2       	ldi	r26, 0x26	; 38
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e6 e2       	ldi	r30, 0x26	; 38
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	80 61       	ori	r24, 0x10	; 16
    214a:	8c 93       	st	X, r24

	//_delay_ms(20);

	Loc_u16_low=ADCL;
    214c:	e4 e2       	ldi	r30, 0x24	; 36
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
	Loc_u16_high=ADCH;
    215a:	e5 e2       	ldi	r30, 0x25	; 37
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01

	
	 return Loc_u16_low|(Loc_u16_high<<8);
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	38 2f       	mov	r19, r24
    216e:	22 27       	eor	r18, r18
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	82 2b       	or	r24, r18
    2176:	93 2b       	or	r25, r19
 

}  
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <ADC_u16_GetLastValue>:
u16 ADC_u16_GetLastValue(void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <ADC_u16_GetLastValue+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <ADC_u16_GetLastValue+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
	u16 Loc_u16_low,Loc_u16_high;

	Loc_u16_low=ADCL;
    2194:	e4 e2       	ldi	r30, 0x24	; 36
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
	Loc_u16_high=ADCH;
    21a2:	e5 e2       	ldi	r30, 0x25	; 37
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01

	return Loc_u16_low|(Loc_u16_high<<8);}
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	38 2f       	mov	r19, r24
    21b6:	22 27       	eor	r18, r18
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	82 2b       	or	r24, r18
    21be:	93 2b       	or	r25, r19
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <ADC_f32_GetAnalogValue>:
f32 ADC_f32_GetAnalogValue(void)
{return (f32)(((f32)(ADC_u16_GetLastValue())*(f32)ADC_u8_Voltage_Refrence)/(f32)1023);
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	0e 94 c4 10 	call	0x2188	; 0x2188 <ADC_u16_GetLastValue>
    21da:	cc 01       	movw	r24, r24
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 ec       	ldi	r20, 0xC0	; 192
    21f6:	50 e4       	ldi	r21, 0x40	; 64
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 ec       	ldi	r19, 0xC0	; 192
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	54 e4       	ldi	r21, 0x44	; 68
    220c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
}
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <fun_ISR0>:
#include "Keypad/Keypad_int.h"
#include "EXITI/EXITI_int.h"
#include "ADC/ADC_int.h"

void fun_ISR0(void)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	USART_vid_SendChar(0x11);		//buzzer
    2226:	81 e1       	ldi	r24, 0x11	; 17
    2228:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>

}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <fun_ISR1>:
void fun_ISR1(void)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
	USART_vid_SendChar(0x12);		//leds
    223a:	82 e1       	ldi	r24, 0x12	; 18
    223c:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
}
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <main>:

int main(void)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	29 97       	sbiw	r28, 0x09	; 9
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
	DIO_vid_Init();
    225a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <DIO_vid_Init>
	ADC_vid_INIT();
    225e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <ADC_vid_INIT>
	ADC_vid_ADC_ENABLE();
    2262:	0e 94 2e 10 	call	0x205c	; 0x205c <ADC_vid_ADC_ENABLE>
	USART_vid_INTIAL(9600);
    2266:	60 e8       	ldi	r22, 0x80	; 128
    2268:	75 e2       	ldi	r23, 0x25	; 37
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <USART_vid_INTIAL>
	GIE_vid_INTERENABLE();
    2272:	0e 94 03 0a 	call	0x1406	; 0x1406 <GIE_vid_INTERENABLE>
	EXITI_vid_INTIAL();
    2276:	0e 94 a6 0a 	call	0x154c	; 0x154c <EXITI_vid_INTIAL>
	EXITI_vid_INT1_ENABLE();
    227a:	0e 94 25 0b 	call	0x164a	; 0x164a <EXITI_vid_INT1_ENABLE>
	EXITI_vid_INT0_ENABLE();
    227e:	0e 94 17 0b 	call	0x162e	; 0x162e <EXITI_vid_INT0_ENABLE>
	EXITI_vid_SetCallBack(fun_ISR0,0);
    2282:	8f e0       	ldi	r24, 0x0F	; 15
    2284:	91 e1       	ldi	r25, 0x11	; 17
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <EXITI_vid_SetCallBack>
	EXITI_vid_SetCallBack(fun_ISR1,1);
    228c:	89 e1       	ldi	r24, 0x19	; 25
    228e:	91 e1       	ldi	r25, 0x11	; 17
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <EXITI_vid_SetCallBack>
	DIO_vid_SetPinConf(26,DIO_u8_INPUT);
    2296:	8a e1       	ldi	r24, 0x1A	; 26
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinConf(27,DIO_u8_INPUT);
    229e:	8b e1       	ldi	r24, 0x1B	; 27
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <DIO_vid_SetPinConf>
	DIO_vid_SetPinPullup(26);
    22a6:	8a e1       	ldi	r24, 0x1A	; 26
    22a8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <DIO_vid_SetPinPullup>
	DIO_vid_SetPinPullup(27);
    22ac:	8b e1       	ldi	r24, 0x1B	; 27
    22ae:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <DIO_vid_SetPinPullup>
	u8  L_R_con_new,B_F_con_new,L_R_con_old=0,B_F_con_old=0;
    22b2:	1b 82       	std	Y+3, r1	; 0x03
    22b4:	1a 82       	std	Y+2, r1	; 0x02
	u8 mass=0;
    22b6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		ADC_u16_ReadChannel(0);
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ADC_u16_ReadChannel>
		L_R_con_new=(u8)ADC_f32_GetAnalogValue();
    22be:	0e 94 e7 10 	call	0x21ce	; 0x21ce <ADC_f32_GetAnalogValue>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8d 83       	std	Y+5, r24	; 0x05
		ADC_u16_ReadChannel(1);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ADC_u16_ReadChannel>
		B_F_con_new=(u8)ADC_f32_GetAnalogValue();
    22da:	0e 94 e7 10 	call	0x21ce	; 0x21ce <ADC_f32_GetAnalogValue>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8c 83       	std	Y+4, r24	; 0x04
		if(L_R_con_old==0)
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	88 23       	and	r24, r24
    22f4:	21 f4       	brne	.+8      	; 0x22fe <main+0xb8>
		{
			L_R_con_old=L_R_con_new;
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	8b 83       	std	Y+3, r24	; 0x03
			B_F_con_old=B_F_con_new;
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(L_R_con_old!=L_R_con_new)
    22fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	98 17       	cp	r25, r24
    2304:	e1 f1       	breq	.+120    	; 0x237e <main+0x138>
		{
			L_R_con_old=L_R_con_new;
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	8b 83       	std	Y+3, r24	; 0x03
			switch(L_R_con_old)
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	39 87       	std	Y+9, r19	; 0x09
    2312:	28 87       	std	Y+8, r18	; 0x08
    2314:	88 85       	ldd	r24, Y+8	; 0x08
    2316:	99 85       	ldd	r25, Y+9	; 0x09
    2318:	83 30       	cpi	r24, 0x03	; 3
    231a:	91 05       	cpc	r25, r1
    231c:	19 f1       	breq	.+70     	; 0x2364 <main+0x11e>
    231e:	28 85       	ldd	r18, Y+8	; 0x08
    2320:	39 85       	ldd	r19, Y+9	; 0x09
    2322:	24 30       	cpi	r18, 0x04	; 4
    2324:	31 05       	cpc	r19, r1
    2326:	5c f4       	brge	.+22     	; 0x233e <main+0xf8>
    2328:	88 85       	ldd	r24, Y+8	; 0x08
    232a:	99 85       	ldd	r25, Y+9	; 0x09
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	91 05       	cpc	r25, r1
    2330:	89 f0       	breq	.+34     	; 0x2354 <main+0x10e>
    2332:	28 85       	ldd	r18, Y+8	; 0x08
    2334:	39 85       	ldd	r19, Y+9	; 0x09
    2336:	22 30       	cpi	r18, 0x02	; 2
    2338:	31 05       	cpc	r19, r1
    233a:	81 f0       	breq	.+32     	; 0x235c <main+0x116>
    233c:	20 c0       	rjmp	.+64     	; 0x237e <main+0x138>
    233e:	88 85       	ldd	r24, Y+8	; 0x08
    2340:	99 85       	ldd	r25, Y+9	; 0x09
    2342:	84 30       	cpi	r24, 0x04	; 4
    2344:	91 05       	cpc	r25, r1
    2346:	91 f0       	breq	.+36     	; 0x236c <main+0x126>
    2348:	28 85       	ldd	r18, Y+8	; 0x08
    234a:	39 85       	ldd	r19, Y+9	; 0x09
    234c:	25 30       	cpi	r18, 0x05	; 5
    234e:	31 05       	cpc	r19, r1
    2350:	99 f0       	breq	.+38     	; 0x2378 <main+0x132>
    2352:	15 c0       	rjmp	.+42     	; 0x237e <main+0x138>
				{
				case 1:
					USART_vid_SendChar(0x01);					//TIMER0_vid_SetCompareReg(2);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    235a:	11 c0       	rjmp	.+34     	; 0x237e <main+0x138>
					break;
				case 2:
					USART_vid_SendChar(0x02);					//TIMER0_vid_SetCompareReg(22);
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    2362:	0d c0       	rjmp	.+26     	; 0x237e <main+0x138>
					break;
				case 3:
					USART_vid_SendChar(0x03);					//TIMER0_vid_SetCompareReg(41);
    2364:	83 e0       	ldi	r24, 0x03	; 3
    2366:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    236a:	09 c0       	rjmp	.+18     	; 0x237e <main+0x138>
					break;
				case 4:
					mass=0x04;
    236c:	84 e0       	ldi	r24, 0x04	; 4
    236e:	89 83       	std	Y+1, r24	; 0x01
					USART_vid_SendChar(0x04);					//TIMER0_vid_SetCompareReg(59);
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    2376:	03 c0       	rjmp	.+6      	; 0x237e <main+0x138>
					break;
				case 5:
					USART_vid_SendChar(0x05);					//TIMER0_vid_SetCompareReg(120);
    2378:	85 e0       	ldi	r24, 0x05	; 5
    237a:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
					break;
				}
		}
		if(B_F_con_old!=B_F_con_new)
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	8c 81       	ldd	r24, Y+4	; 0x04
    2382:	98 17       	cp	r25, r24
    2384:	09 f4       	brne	.+2      	; 0x2388 <main+0x142>
    2386:	98 cf       	rjmp	.-208    	; 0x22b8 <main+0x72>
		{
			B_F_con_old=B_F_con_new;
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	8a 83       	std	Y+2, r24	; 0x02
			switch(B_F_con_new)
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	3f 83       	std	Y+7, r19	; 0x07
    2394:	2e 83       	std	Y+6, r18	; 0x06
    2396:	8e 81       	ldd	r24, Y+6	; 0x06
    2398:	9f 81       	ldd	r25, Y+7	; 0x07
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	91 05       	cpc	r25, r1
    239e:	19 f1       	breq	.+70     	; 0x23e6 <main+0x1a0>
    23a0:	2e 81       	ldd	r18, Y+6	; 0x06
    23a2:	3f 81       	ldd	r19, Y+7	; 0x07
    23a4:	24 30       	cpi	r18, 0x04	; 4
    23a6:	31 05       	cpc	r19, r1
    23a8:	5c f4       	brge	.+22     	; 0x23c0 <main+0x17a>
    23aa:	8e 81       	ldd	r24, Y+6	; 0x06
    23ac:	9f 81       	ldd	r25, Y+7	; 0x07
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	91 05       	cpc	r25, r1
    23b2:	89 f0       	breq	.+34     	; 0x23d6 <main+0x190>
    23b4:	2e 81       	ldd	r18, Y+6	; 0x06
    23b6:	3f 81       	ldd	r19, Y+7	; 0x07
    23b8:	22 30       	cpi	r18, 0x02	; 2
    23ba:	31 05       	cpc	r19, r1
    23bc:	81 f0       	breq	.+32     	; 0x23de <main+0x198>
    23be:	7c cf       	rjmp	.-264    	; 0x22b8 <main+0x72>
    23c0:	8e 81       	ldd	r24, Y+6	; 0x06
    23c2:	9f 81       	ldd	r25, Y+7	; 0x07
    23c4:	84 30       	cpi	r24, 0x04	; 4
    23c6:	91 05       	cpc	r25, r1
    23c8:	91 f0       	breq	.+36     	; 0x23ee <main+0x1a8>
    23ca:	2e 81       	ldd	r18, Y+6	; 0x06
    23cc:	3f 81       	ldd	r19, Y+7	; 0x07
    23ce:	25 30       	cpi	r18, 0x05	; 5
    23d0:	31 05       	cpc	r19, r1
    23d2:	89 f0       	breq	.+34     	; 0x23f6 <main+0x1b0>
    23d4:	71 cf       	rjmp	.-286    	; 0x22b8 <main+0x72>
				{
				case 1:
					USART_vid_SendChar(0x06);						//TIMER2_vid_SetCompareReg(254);
    23d6:	86 e0       	ldi	r24, 0x06	; 6
    23d8:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    23dc:	6d cf       	rjmp	.-294    	; 0x22b8 <main+0x72>
																	//	DIO_vid_SetPinVal(17,0);
					break;
				case 2:
					USART_vid_SendChar(0x07);					//TIMER2_vid_SetCompareReg(100);
    23de:	87 e0       	ldi	r24, 0x07	; 7
    23e0:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    23e4:	69 cf       	rjmp	.-302    	; 0x22b8 <main+0x72>
																//DIO_vid_SetPinVal(17,0);
					break;
				case 3:
					USART_vid_SendChar(0x08);					//TIMER2_vid_SetCompareReg(0);
    23e6:	88 e0       	ldi	r24, 0x08	; 8
    23e8:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    23ec:	65 cf       	rjmp	.-310    	; 0x22b8 <main+0x72>

					break;
				case 4:
					USART_vid_SendChar(0x09);					//TIMER2_vid_SetCompareReg(100);
    23ee:	89 e0       	ldi	r24, 0x09	; 9
    23f0:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    23f4:	61 cf       	rjmp	.-318    	; 0x22b8 <main+0x72>
																//DIO_vid_SetPinVal(17,1);
					break;
				case 5:
					USART_vid_SendChar(0x10);					//TIMER2_vid_SetCompareReg(254);
    23f6:	80 e1       	ldi	r24, 0x10	; 16
    23f8:	0e 94 2e 08 	call	0x105c	; 0x105c <USART_vid_SendChar>
    23fc:	5d cf       	rjmp	.-326    	; 0x22b8 <main+0x72>

000023fe <__udivmodsi4>:
    23fe:	a1 e2       	ldi	r26, 0x21	; 33
    2400:	1a 2e       	mov	r1, r26
    2402:	aa 1b       	sub	r26, r26
    2404:	bb 1b       	sub	r27, r27
    2406:	fd 01       	movw	r30, r26
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <__udivmodsi4_ep>

0000240a <__udivmodsi4_loop>:
    240a:	aa 1f       	adc	r26, r26
    240c:	bb 1f       	adc	r27, r27
    240e:	ee 1f       	adc	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	a2 17       	cp	r26, r18
    2414:	b3 07       	cpc	r27, r19
    2416:	e4 07       	cpc	r30, r20
    2418:	f5 07       	cpc	r31, r21
    241a:	20 f0       	brcs	.+8      	; 0x2424 <__udivmodsi4_ep>
    241c:	a2 1b       	sub	r26, r18
    241e:	b3 0b       	sbc	r27, r19
    2420:	e4 0b       	sbc	r30, r20
    2422:	f5 0b       	sbc	r31, r21

00002424 <__udivmodsi4_ep>:
    2424:	66 1f       	adc	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	1a 94       	dec	r1
    242e:	69 f7       	brne	.-38     	; 0x240a <__udivmodsi4_loop>
    2430:	60 95       	com	r22
    2432:	70 95       	com	r23
    2434:	80 95       	com	r24
    2436:	90 95       	com	r25
    2438:	9b 01       	movw	r18, r22
    243a:	ac 01       	movw	r20, r24
    243c:	bd 01       	movw	r22, r26
    243e:	cf 01       	movw	r24, r30
    2440:	08 95       	ret

00002442 <__prologue_saves__>:
    2442:	2f 92       	push	r2
    2444:	3f 92       	push	r3
    2446:	4f 92       	push	r4
    2448:	5f 92       	push	r5
    244a:	6f 92       	push	r6
    244c:	7f 92       	push	r7
    244e:	8f 92       	push	r8
    2450:	9f 92       	push	r9
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	ca 1b       	sub	r28, r26
    246c:	db 0b       	sbc	r29, r27
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	09 94       	ijmp

0000247a <__epilogue_restores__>:
    247a:	2a 88       	ldd	r2, Y+18	; 0x12
    247c:	39 88       	ldd	r3, Y+17	; 0x11
    247e:	48 88       	ldd	r4, Y+16	; 0x10
    2480:	5f 84       	ldd	r5, Y+15	; 0x0f
    2482:	6e 84       	ldd	r6, Y+14	; 0x0e
    2484:	7d 84       	ldd	r7, Y+13	; 0x0d
    2486:	8c 84       	ldd	r8, Y+12	; 0x0c
    2488:	9b 84       	ldd	r9, Y+11	; 0x0b
    248a:	aa 84       	ldd	r10, Y+10	; 0x0a
    248c:	b9 84       	ldd	r11, Y+9	; 0x09
    248e:	c8 84       	ldd	r12, Y+8	; 0x08
    2490:	df 80       	ldd	r13, Y+7	; 0x07
    2492:	ee 80       	ldd	r14, Y+6	; 0x06
    2494:	fd 80       	ldd	r15, Y+5	; 0x05
    2496:	0c 81       	ldd	r16, Y+4	; 0x04
    2498:	1b 81       	ldd	r17, Y+3	; 0x03
    249a:	aa 81       	ldd	r26, Y+2	; 0x02
    249c:	b9 81       	ldd	r27, Y+1	; 0x01
    249e:	ce 0f       	add	r28, r30
    24a0:	d1 1d       	adc	r29, r1
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	ed 01       	movw	r28, r26
    24ae:	08 95       	ret

000024b0 <_exit>:
    24b0:	f8 94       	cli

000024b2 <__stop_program>:
    24b2:	ff cf       	rjmp	.-2      	; 0x24b2 <__stop_program>
